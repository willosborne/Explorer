// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxBitmapFont
#include <flixel/graphics/frames/FlxBitmapFont.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxBitmapText
#include <flixel/text/FlxBitmapText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBitmapTextButton
#include <flixel/ui/FlxBitmapTextButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxBitmapText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxBitmapText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ceb6c4ca758fd3a8_13_new,"flixel.ui.FlxBitmapTextButton","new",0xfd18e96a,"flixel.ui.FlxBitmapTextButton.new","flixel/ui/FlxBitmapTextButton.hx",13,0x0e45dfe6)
HX_LOCAL_STACK_FRAME(_hx_pos_ceb6c4ca758fd3a8_39_resetHelpers,"flixel.ui.FlxBitmapTextButton","resetHelpers",0xbd75feec,"flixel.ui.FlxBitmapTextButton.resetHelpers","flixel/ui/FlxBitmapTextButton.hx",39,0x0e45dfe6)
HX_LOCAL_STACK_FRAME(_hx_pos_ceb6c4ca758fd3a8_49_update,"flixel.ui.FlxBitmapTextButton","update",0xa0522f3f,"flixel.ui.FlxBitmapTextButton.update","flixel/ui/FlxBitmapTextButton.hx",49,0x0e45dfe6)
namespace flixel{
namespace ui{

void FlxBitmapTextButton_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Label, ::Dynamic OnClick){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_ceb6c4ca758fd3a8_13_new)
HXLINE(  14)		super::__construct(X,Y,OnClick);
HXLINE(  16)		if (hx::IsNotNull( Label )) {
HXLINE(  18)			this->set_label( ::flixel::text::FlxBitmapText_obj::__alloc( HX_CTX ,null()));
HXLINE(  19)			this->label->set_width((int)80);
HXLINE(  20)			this->label->set_text(Label);
HXLINE(  21)			this->label->set_color((int)-13421773);
HXLINE(  22)			this->label->set_useTextColor(true);
HXLINE(  23)			this->label->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  25)			{
HXLINE(  25)				int _g = (int)0;
HXDLIN(  25)				::Array< ::Dynamic> _g1 = this->labelOffsets;
HXDLIN(  25)				while((_g < _g1->length)){
HXLINE(  25)					 ::flixel::math::FlxPoint offset = _g1->__get(_g).StaticCast<  ::flixel::math::FlxPoint >();
HXDLIN(  25)					_g = (_g + (int)1);
HXLINE(  27)					offset->set((int)0,(int)5);
            				}
            			}
HXLINE(  30)			 ::flixel::text::FlxBitmapText _hx_tmp = this->label;
HXDLIN(  30)			_hx_tmp->set_x((X + this->labelOffsets->__get(this->status).StaticCast<  ::flixel::math::FlxPoint >()->x));
HXLINE(  31)			 ::flixel::text::FlxBitmapText _hx_tmp1 = this->label;
HXDLIN(  31)			_hx_tmp1->set_y((Y + this->labelOffsets->__get(this->status).StaticCast<  ::flixel::math::FlxPoint >()->y));
            		}
            	}

Dynamic FlxBitmapTextButton_obj::__CreateEmpty() { return new FlxBitmapTextButton_obj; }

void *FlxBitmapTextButton_obj::_hx_vtable = 0;

Dynamic FlxBitmapTextButton_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxBitmapTextButton_obj > _hx_result = new FlxBitmapTextButton_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxBitmapTextButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2d1993be) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x2d1993be;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x46297990;
	}
}

void FlxBitmapTextButton_obj::resetHelpers(){
            	HX_STACKFRAME(&_hx_pos_ceb6c4ca758fd3a8_39_resetHelpers)
HXLINE(  40)		this->super::resetHelpers();
HXLINE(  42)		if (hx::IsNotNull( this->label )) {
HXLINE(  44)			 ::flixel::text::FlxBitmapText _hx_tmp = this->label;
HXDLIN(  44)			_hx_tmp->set_width(this->get_width());
            		}
            	}


void FlxBitmapTextButton_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_ceb6c4ca758fd3a8_49_update)
HXLINE(  50)		this->super::update(elapsed);
HXLINE(  52)		if (hx::IsNotNull( this->label )) {
HXLINE(  54)			this->label->update(elapsed);
            		}
            	}



hx::ObjectPtr< FlxBitmapTextButton_obj > FlxBitmapTextButton_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Label, ::Dynamic OnClick) {
	hx::ObjectPtr< FlxBitmapTextButton_obj > __this = new FlxBitmapTextButton_obj();
	__this->__construct(__o_X,__o_Y,Label,OnClick);
	return __this;
}

hx::ObjectPtr< FlxBitmapTextButton_obj > FlxBitmapTextButton_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Label, ::Dynamic OnClick) {
	FlxBitmapTextButton_obj *__this = (FlxBitmapTextButton_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxBitmapTextButton_obj), true, "flixel.ui.FlxBitmapTextButton"));
	*(void **)__this = FlxBitmapTextButton_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,Label,OnClick);
	return __this;
}

FlxBitmapTextButton_obj::FlxBitmapTextButton_obj()
{
}

hx::Val FlxBitmapTextButton_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetHelpers") ) { return hx::Val( resetHelpers_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxBitmapTextButton_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *FlxBitmapTextButton_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxBitmapTextButton_obj_sMemberFields[] = {
	HX_HCSTRING("resetHelpers","\x36","\x89","\x3d","\x32"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void FlxBitmapTextButton_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxBitmapTextButton_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxBitmapTextButton_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxBitmapTextButton_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxBitmapTextButton_obj::__mClass;

void FlxBitmapTextButton_obj::__register()
{
	hx::Object *dummy = new FlxBitmapTextButton_obj;
	FlxBitmapTextButton_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.ui.FlxBitmapTextButton","\x78","\xac","\x01","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxBitmapTextButton_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxBitmapTextButton_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxBitmapTextButton_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxBitmapTextButton_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxBitmapTextButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxBitmapTextButton_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace ui
