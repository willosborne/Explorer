// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxBitmapFont
#include <flixel/graphics/frames/FlxBitmapFont.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrameCollectionType
#include <flixel/graphics/frames/FlxFrameCollectionType.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_AttribAccess
#include <haxe/xml/_Fast/AttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasAttribAccess
#include <haxe/xml/_Fast/HasAttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeAccess
#include <haxe/xml/_Fast/NodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeListAccess
#include <haxe/xml/_Fast/NodeListAccess.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_873f477e55df57ae_23_new,"flixel.graphics.frames.FlxBitmapFont","new",0x6c52b9eb,"flixel.graphics.frames.FlxBitmapFont.new","flixel/graphics/frames/FlxBitmapFont.hx",23,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_96_destroy,"flixel.graphics.frames.FlxBitmapFont","destroy",0xcd603805,"flixel.graphics.frames.FlxBitmapFont.destroy","flixel/graphics/frames/FlxBitmapFont.hx",96,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_561_addCharFrame,"flixel.graphics.frames.FlxBitmapFont","addCharFrame",0x12fb302b,"flixel.graphics.frames.FlxBitmapFont.addCharFrame","flixel/graphics/frames/FlxBitmapFont.hx",561,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_584_updateSourceHeight,"flixel.graphics.frames.FlxBitmapFont","updateSourceHeight",0x2eb589a0,"flixel.graphics.frames.FlxBitmapFont.updateSourceHeight","flixel/graphics/frames/FlxBitmapFont.hx",584,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_593_charExists,"flixel.graphics.frames.FlxBitmapFont","charExists",0x5c03e327,"flixel.graphics.frames.FlxBitmapFont.charExists","flixel/graphics/frames/FlxBitmapFont.hx",593,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_598_getCharFrame,"flixel.graphics.frames.FlxBitmapFont","getCharFrame",0x22fdab16,"flixel.graphics.frames.FlxBitmapFont.getCharFrame","flixel/graphics/frames/FlxBitmapFont.hx",598,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_603_getCharAdvance,"flixel.graphics.frames.FlxBitmapFont","getCharAdvance",0xc4a787ab,"flixel.graphics.frames.FlxBitmapFont.getCharAdvance","flixel/graphics/frames/FlxBitmapFont.hx",603,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_608_getCharWidth,"flixel.graphics.frames.FlxBitmapFont","getCharWidth",0xe6dce8ef,"flixel.graphics.frames.FlxBitmapFont.getCharWidth","flixel/graphics/frames/FlxBitmapFont.hx",608,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_628_addBorder,"flixel.graphics.frames.FlxBitmapFont","addBorder",0x37f9a5b8,"flixel.graphics.frames.FlxBitmapFont.addBorder","flixel/graphics/frames/FlxBitmapFont.hx",628,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_108_getDefaultFont,"flixel.graphics.frames.FlxBitmapFont","getDefaultFont",0xc395e68f,"flixel.graphics.frames.FlxBitmapFont.getDefaultFont","flixel/graphics/frames/FlxBitmapFont.hx",108,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_163_fromAngelCode,"flixel.graphics.frames.FlxBitmapFont","fromAngelCode",0x6c02320f,"flixel.graphics.frames.FlxBitmapFont.fromAngelCode","flixel/graphics/frames/FlxBitmapFont.hx",163,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_303_fromXNA,"flixel.graphics.frames.FlxBitmapFont","fromXNA",0x00e02e6c,"flixel.graphics.frames.FlxBitmapFont.fromXNA","flixel/graphics/frames/FlxBitmapFont.hx",303,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_443_transformPoint,"flixel.graphics.frames.FlxBitmapFont","transformPoint",0x638a0b99,"flixel.graphics.frames.FlxBitmapFont.transformPoint","flixel/graphics/frames/FlxBitmapFont.hx",443,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_478_fromMonospace,"flixel.graphics.frames.FlxBitmapFont","fromMonospace",0xd0af7444,"flixel.graphics.frames.FlxBitmapFont.fromMonospace","flixel/graphics/frames/FlxBitmapFont.hx",478,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_612_findFont,"flixel.graphics.frames.FlxBitmapFont","findFont",0xac44093d,"flixel.graphics.frames.FlxBitmapFont.findFont","flixel/graphics/frames/FlxBitmapFont.hx",612,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_25_boot,"flixel.graphics.frames.FlxBitmapFont","boot",0x5428f447,"flixel.graphics.frames.FlxBitmapFont.boot","flixel/graphics/frames/FlxBitmapFont.hx",25,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_26_boot,"flixel.graphics.frames.FlxBitmapFont","boot",0x5428f447,"flixel.graphics.frames.FlxBitmapFont.boot","flixel/graphics/frames/FlxBitmapFont.hx",26,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_27_boot,"flixel.graphics.frames.FlxBitmapFont","boot",0x5428f447,"flixel.graphics.frames.FlxBitmapFont.boot","flixel/graphics/frames/FlxBitmapFont.hx",27,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_29_boot,"flixel.graphics.frames.FlxBitmapFont","boot",0x5428f447,"flixel.graphics.frames.FlxBitmapFont.boot","flixel/graphics/frames/FlxBitmapFont.hx",29,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_31_boot,"flixel.graphics.frames.FlxBitmapFont","boot",0x5428f447,"flixel.graphics.frames.FlxBitmapFont.boot","flixel/graphics/frames/FlxBitmapFont.hx",31,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_36_boot,"flixel.graphics.frames.FlxBitmapFont","boot",0x5428f447,"flixel.graphics.frames.FlxBitmapFont.boot","flixel/graphics/frames/FlxBitmapFont.hx",36,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_38_boot,"flixel.graphics.frames.FlxBitmapFont","boot",0x5428f447,"flixel.graphics.frames.FlxBitmapFont.boot","flixel/graphics/frames/FlxBitmapFont.hx",38,0xde348206)
HX_LOCAL_STACK_FRAME(_hx_pos_873f477e55df57ae_39_boot,"flixel.graphics.frames.FlxBitmapFont","boot",0x5428f447,"flixel.graphics.frames.FlxBitmapFont.boot","flixel/graphics/frames/FlxBitmapFont.hx",39,0xde348206)
namespace flixel{
namespace graphics{
namespace frames{

void FlxBitmapFont_obj::__construct( ::flixel::graphics::frames::FlxFrame frame, ::flixel::math::FlxPoint border){
            	HX_GC_STACKFRAME(&_hx_pos_873f477e55df57ae_23_new)
HXLINE(  65)		this->spaceWidth = (int)0;
HXLINE(  60)		this->minOffsetX = (int)0;
HXLINE(  54)		this->numLetters = (int)0;
HXLINE(  50)		this->italic = false;
HXLINE(  48)		this->bold = false;
HXLINE(  46)		this->lineHeight = (int)0;
HXLINE(  44)		this->size = (int)0;
HXLINE(  87)		super::__construct(frame->parent,::flixel::graphics::frames::FlxFrameCollectionType_obj::FONT_dyn(),border);
HXLINE(  88)		this->frame = frame;
HXLINE(  89)		this->parent->persist = true;
HXLINE(  90)		this->parent->set_destroyOnNoUse(false);
HXLINE(  91)		this->charMap =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  92)		this->charAdvance =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}

Dynamic FlxBitmapFont_obj::__CreateEmpty() { return new FlxBitmapFont_obj; }

void *FlxBitmapFont_obj::_hx_vtable = 0;

Dynamic FlxBitmapFont_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxBitmapFont_obj > _hx_result = new FlxBitmapFont_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxBitmapFont_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0163a3e9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0163a3e9;
	} else {
		return inClassId==(int)0x6823e1e3;
	}
}

void FlxBitmapFont_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_873f477e55df57ae_96_destroy)
HXLINE(  97)		this->super::destroy();
HXLINE(  98)		this->frame = null();
HXLINE(  99)		this->fontName = null();
HXLINE( 100)		this->charMap = null();
HXLINE( 101)		this->charAdvance = null();
            	}


void FlxBitmapFont_obj::addCharFrame(int charCode, ::flixel::math::FlxRect frame, ::flixel::math::FlxPoint offset,int xAdvance){
            	HX_GC_STACKFRAME(&_hx_pos_873f477e55df57ae_561_addCharFrame)
HXLINE( 562)		 ::haxe::Utf8 utf8 =  ::haxe::Utf8_obj::__alloc( HX_CTX ,null());
HXLINE( 563)		utf8->addChar(charCode);
HXLINE( 564)		::String charName = utf8->toString();
HXLINE( 565)		bool _hx_tmp;
HXDLIN( 565)		bool _hx_tmp1;
HXDLIN( 565)		if ((frame->width != (int)0)) {
HXLINE( 565)			_hx_tmp1 = (frame->height == (int)0);
            		}
            		else {
HXLINE( 565)			_hx_tmp1 = true;
            		}
HXDLIN( 565)		if (!(_hx_tmp1)) {
HXLINE( 565)			_hx_tmp = hx::IsNotNull( ( ( ::flixel::graphics::frames::FlxFrame)(::haxe::IMap_obj::get(this->framesHash,charName)) ) );
            		}
            		else {
HXLINE( 565)			_hx_tmp = true;
            		}
HXDLIN( 565)		if (_hx_tmp) {
HXLINE( 566)			return;
            		}
HXLINE( 567)		 ::flixel::graphics::frames::FlxFrame charFrame = this->frame->subFrameTo(frame,null());
HXLINE( 569)		Float w = charFrame->sourceSize->x;
HXLINE( 570)		Float h = charFrame->sourceSize->y;
HXLINE( 571)		Float w1;
HXDLIN( 571)		if ((offset->x > (int)0)) {
HXLINE( 571)			w1 = offset->x;
            		}
            		else {
HXLINE( 571)			w1 = (int)0;
            		}
HXDLIN( 571)		w = (w + w1);
HXLINE( 572)		Float h1;
HXDLIN( 572)		if ((offset->y > (int)0)) {
HXLINE( 572)			h1 = offset->y;
            		}
            		else {
HXLINE( 572)			h1 = (int)0;
            		}
HXDLIN( 572)		h = (h + h1);
HXLINE( 573)		charFrame->sourceSize->set(w,h);
HXLINE( 574)		charFrame->offset->addPoint(offset);
HXLINE( 575)		charFrame->name = charName;
HXLINE( 576)		this->pushFrame(charFrame);
HXLINE( 577)		this->charMap->set(charCode,charFrame);
HXLINE( 578)		this->charAdvance->set(charCode,xAdvance);
HXLINE( 579)		offset->put();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBitmapFont_obj,addCharFrame,(void))

void FlxBitmapFont_obj::updateSourceHeight(){
            	HX_STACKFRAME(&_hx_pos_873f477e55df57ae_584_updateSourceHeight)
HXDLIN( 584)		int _g = (int)0;
HXDLIN( 584)		::Array< ::Dynamic> _g1 = this->frames;
HXDLIN( 584)		while((_g < _g1->length)){
HXDLIN( 584)			 ::flixel::graphics::frames::FlxFrame frame = _g1->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 584)			_g = (_g + (int)1);
HXLINE( 586)			frame->sourceSize->set_y(this->lineHeight);
HXLINE( 587)			frame->cacheFrameMatrix();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBitmapFont_obj,updateSourceHeight,(void))

bool FlxBitmapFont_obj::charExists(int charCode){
            	HX_STACKFRAME(&_hx_pos_873f477e55df57ae_593_charExists)
HXDLIN( 593)		return this->charMap->exists(charCode);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBitmapFont_obj,charExists,return )

 ::flixel::graphics::frames::FlxFrame FlxBitmapFont_obj::getCharFrame(int charCode){
            	HX_STACKFRAME(&_hx_pos_873f477e55df57ae_598_getCharFrame)
HXDLIN( 598)		return this->charMap->get(charCode).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBitmapFont_obj,getCharFrame,return )

int FlxBitmapFont_obj::getCharAdvance(int charCode){
            	HX_STACKFRAME(&_hx_pos_873f477e55df57ae_603_getCharAdvance)
HXDLIN( 603)		if (this->charAdvance->exists(charCode)) {
HXDLIN( 603)			return ( (int)(this->charAdvance->get(charCode)) );
            		}
            		else {
HXDLIN( 603)			return (int)0;
            		}
HXDLIN( 603)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBitmapFont_obj,getCharAdvance,return )

Float FlxBitmapFont_obj::getCharWidth(int charCode){
            	HX_STACKFRAME(&_hx_pos_873f477e55df57ae_608_getCharWidth)
HXDLIN( 608)		if (this->charMap->exists(charCode)) {
HXDLIN( 608)			return this->charMap->get(charCode).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->sourceSize->x;
            		}
            		else {
HXDLIN( 608)			return (int)0;
            		}
HXDLIN( 608)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBitmapFont_obj,getCharWidth,return )

 ::flixel::graphics::frames::FlxFramesCollection FlxBitmapFont_obj::addBorder( ::flixel::math::FlxPoint border){
            	HX_GC_STACKFRAME(&_hx_pos_873f477e55df57ae_628_addBorder)
HXLINE( 629)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 629)		point->_inPool = false;
HXDLIN( 629)		 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 629)		point1->_weak = true;
HXDLIN( 629)		 ::flixel::math::FlxPoint resultBorder = point1->addPoint(this->border)->addPoint(border);
HXLINE( 631)		 ::flixel::graphics::frames::FlxBitmapFont font = ::flixel::graphics::frames::FlxBitmapFont_obj::findFont(this->frame,resultBorder);
HXLINE( 632)		if (hx::IsNotNull( font )) {
HXLINE( 634)			return font;
            		}
HXLINE( 637)		font =  ::flixel::graphics::frames::FlxBitmapFont_obj::__alloc( HX_CTX ,this->frame,border);
HXLINE( 638)		font->spaceWidth = this->spaceWidth;
HXLINE( 639)		font->fontName = this->fontName;
HXLINE( 640)		font->numLetters = this->numLetters;
HXLINE( 641)		font->minOffsetX = this->minOffsetX;
HXLINE( 642)		font->size = this->size;
HXLINE( 643)		font->lineHeight = this->lineHeight;
HXLINE( 644)		font->italic = this->italic;
HXLINE( 645)		font->bold = this->bold;
HXLINE( 647)		 ::flixel::graphics::frames::FlxFrame charWithBorder;
HXLINE( 648)		int code;
HXLINE( 649)		{
HXLINE( 649)			int _g = (int)0;
HXDLIN( 649)			::Array< ::Dynamic> _g1 = this->frames;
HXDLIN( 649)			while((_g < _g1->length)){
HXLINE( 649)				 ::flixel::graphics::frames::FlxFrame _hx_char = _g1->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 649)				_g = (_g + (int)1);
HXLINE( 651)				charWithBorder = _hx_char->setBorderTo(border,null());
HXLINE( 652)				font->pushFrame(charWithBorder);
HXLINE( 653)				code = ::haxe::Utf8_obj::charCodeAt(_hx_char->name,(int)0);
HXLINE( 654)				font->charMap->set(code,charWithBorder);
HXLINE( 655)				{
HXLINE( 655)					::Dynamic this1 = font->charAdvance;
HXDLIN( 655)					( ( ::haxe::ds::IntMap)(this1) )->set(code,( (int)(this->charAdvance->get(code)) ));
            				}
            			}
            		}
HXLINE( 658)		font->updateSourceHeight();
HXLINE( 659)		return font;
            	}


int FlxBitmapFont_obj::SPACE_CODE;

int FlxBitmapFont_obj::TAB_CODE;

int FlxBitmapFont_obj::NEW_LINE_CODE;

::String FlxBitmapFont_obj::DEFAULT_FONT_KEY;

::String FlxBitmapFont_obj::DEFAULT_FONT_DATA;

::String FlxBitmapFont_obj::DEFAULT_CHARS;

 ::openfl::_legacy::geom::Point FlxBitmapFont_obj::point;

 ::openfl::_legacy::geom::Rectangle FlxBitmapFont_obj::flashRect;

 ::flixel::graphics::frames::FlxBitmapFont FlxBitmapFont_obj::getDefaultFont(){
            	HX_GC_STACKFRAME(&_hx_pos_873f477e55df57ae_108_getDefaultFont)
HXLINE( 109)		 ::flixel::graphics::FlxGraphic graphic = ( ( ::flixel::graphics::FlxGraphic)(::haxe::IMap_obj::get(::flixel::FlxG_obj::bitmap->_cache,HX_("DEFAULT_FONT_KEY",6d,52,ec,bd))) );
HXLINE( 110)		if (hx::IsNotNull( graphic )) {
HXLINE( 112)			 ::flixel::graphics::frames::FlxBitmapFont font = ::flixel::graphics::frames::FlxBitmapFont_obj::findFont(graphic->get_imageFrame()->get_frame(),null());
HXLINE( 113)			if (hx::IsNotNull( font )) {
HXLINE( 114)				return font;
            			}
            		}
HXLINE( 117)		::String letters = HX_("",00,00,00,00);
HXLINE( 118)		 ::openfl::_legacy::display::BitmapData bd =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,(int)700,(int)9,true,(int)-7829368,null());
HXLINE( 119)		graphic = ::flixel::FlxG_obj::bitmap->add(bd,false,HX_("DEFAULT_FONT_KEY",6d,52,ec,bd));
HXLINE( 121)		int letterPos = (int)0;
HXLINE( 122)		int i = (int)0;
HXLINE( 124)		while((i < HX_(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",b9,ed,10,8a).length)){
HXLINE( 126)			letters = (letters + HX_(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",b9,ed,10,8a).substr(i,(int)1));
HXLINE( 128)			i = (i + (int)1);
HXDLIN( 128)			int gw = ::Std_obj::parseInt(HX_(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",b9,ed,10,8a).substr(i,(int)1));
HXLINE( 129)			i = (i + (int)1);
HXDLIN( 129)			int gh = ::Std_obj::parseInt(HX_(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",b9,ed,10,8a).substr(i,(int)1));
HXLINE( 131)			{
HXLINE( 131)				int _g1 = (int)0;
HXDLIN( 131)				int _g = gh;
HXDLIN( 131)				while((_g1 < _g)){
HXLINE( 131)					_g1 = (_g1 + (int)1);
HXDLIN( 131)					int py = (_g1 - (int)1);
HXLINE( 133)					{
HXLINE( 133)						int _g3 = (int)0;
HXDLIN( 133)						int _g2 = gw;
HXDLIN( 133)						while((_g3 < _g2)){
HXLINE( 133)							_g3 = (_g3 + (int)1);
HXDLIN( 133)							int px = (_g3 - (int)1);
HXLINE( 135)							i = (i + (int)1);
HXLINE( 137)							if ((HX_(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",b9,ed,10,8a).substr(i,(int)1) == HX_("1",31,00,00,00))) {
HXLINE( 139)								bd->setPixel32((((int)1 + (letterPos * (int)7)) + px),((int)1 + py),(int)-1);
            							}
            							else {
HXLINE( 143)								bd->setPixel32((((int)1 + (letterPos * (int)7)) + px),((int)1 + py),(int)0);
            							}
            						}
            					}
            				}
            			}
HXLINE( 148)			i = (i + (int)1);
HXLINE( 149)			letterPos = (letterPos + (int)1);
            		}
HXLINE( 152)		return ::flixel::graphics::frames::FlxBitmapFont_obj::fromXNA(graphic,letters,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxBitmapFont_obj,getDefaultFont,return )

 ::flixel::graphics::frames::FlxBitmapFont FlxBitmapFont_obj::fromAngelCode( ::Dynamic Source, ::Dynamic Data){
            	HX_GC_STACKFRAME(&_hx_pos_873f477e55df57ae_163_fromAngelCode)
HXLINE( 164)		 ::flixel::graphics::FlxGraphic graphic = null();
HXLINE( 165)		 ::flixel::graphics::frames::FlxFrame frame = null();
HXLINE( 167)		if (::Std_obj::is(Source,hx::ClassOf< ::flixel::graphics::frames::FlxFrame >())) {
HXLINE( 169)			frame = ( ( ::flixel::graphics::frames::FlxFrame)(Source) );
HXLINE( 170)			graphic = frame->parent;
            		}
            		else {
HXLINE( 174)			graphic = ::flixel::FlxG_obj::bitmap->add(Source,null(),null());
HXLINE( 175)			frame = graphic->get_imageFrame()->get_frame();
            		}
HXLINE( 178)		 ::flixel::graphics::frames::FlxBitmapFont font = ::flixel::graphics::frames::FlxBitmapFont_obj::findFont(frame,null());
HXLINE( 179)		if (hx::IsNotNull( font )) {
HXLINE( 180)			return font;
            		}
HXLINE( 182)		 ::Xml fontData = null();
HXLINE( 184)		if (hx::IsNotNull( Data )) {
HXLINE( 186)			if (::Std_obj::is(Data,hx::ClassOf< ::Xml >())) {
HXLINE( 188)				fontData = ( ( ::Xml)(Data) );
            			}
            			else {
HXLINE( 192)				::String data = ::Std_obj::string(Data);
HXLINE( 194)				if (::openfl::_legacy::Assets_obj::exists(data,null())) {
HXLINE( 196)					data = ::openfl::_legacy::Assets_obj::getText(data);
            				}
HXLINE( 199)				fontData = ::Xml_obj::parse(data);
            			}
            		}
HXLINE( 203)		font =  ::flixel::graphics::frames::FlxBitmapFont_obj::__alloc( HX_CTX ,frame,null());
HXLINE( 205)		 ::haxe::xml::Fast fast =  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,fontData->firstElement());
HXLINE( 208)		font->lineHeight = ::Std_obj::parseInt(fast->node->resolve(HX_("common",2b,75,2e,c7))->att->resolve(HX_("lineHeight",fb,02,f4,d6)));
HXLINE( 209)		font->size = ::Std_obj::parseInt(fast->node->resolve(HX_("info",6e,38,bb,45))->att->resolve(HX_("size",c1,a0,53,4c)));
HXLINE( 210)		font->fontName = ::Std_obj::string(fast->node->resolve(HX_("info",6e,38,bb,45))->att->resolve(HX_("face",9d,b4,b5,43)));
HXLINE( 211)		font->bold = hx::IsNotEq( ::Std_obj::parseInt(fast->node->resolve(HX_("info",6e,38,bb,45))->att->resolve(HX_("bold",85,81,1b,41))),(int)0 );
HXLINE( 212)		font->italic = hx::IsNotEq( ::Std_obj::parseInt(fast->node->resolve(HX_("info",6e,38,bb,45))->att->resolve(HX_("italic",f0,2e,64,06))),(int)0 );
HXLINE( 214)		 ::flixel::math::FlxRect frame1;
HXLINE( 215)		int frameHeight;
HXLINE( 216)		 ::flixel::math::FlxPoint offset;
HXLINE( 217)		::String charStr;
HXLINE( 218)		int charCode;
HXLINE( 219)		int xOffset;
HXDLIN( 219)		int yOffset;
HXDLIN( 219)		int xAdvance;
HXLINE( 221)		 ::haxe::xml::Fast chars = fast->node->resolve(HX_("chars",dd,9c,b3,45));
HXLINE( 223)		{
HXLINE( 223)			 ::_List::ListNode _g_head = chars->nodes->resolve(HX_("char",d6,5e,bf,41))->h;
HXDLIN( 223)			while(hx::IsNotNull( _g_head )){
HXLINE( 223)				 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN( 223)				_g_head = _g_head->next;
HXDLIN( 223)				 ::haxe::xml::Fast _hx_char = val;
HXLINE( 225)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 225)				_this->x = (int)0;
HXDLIN( 225)				_this->y = (int)0;
HXDLIN( 225)				_this->width = (int)0;
HXDLIN( 225)				_this->height = (int)0;
HXDLIN( 225)				 ::flixel::math::FlxRect rect = _this;
HXDLIN( 225)				rect->_inPool = false;
HXDLIN( 225)				frame1 = rect;
HXLINE( 226)				frame1->x = ::Std_obj::parseInt(_hx_char->att->resolve(HX_("x",78,00,00,00)));
HXLINE( 227)				frame1->y = ::Std_obj::parseInt(_hx_char->att->resolve(HX_("y",79,00,00,00)));
HXLINE( 228)				frame1->width = ::Std_obj::parseInt(_hx_char->att->resolve(HX_("width",06,b6,62,ca)));
HXLINE( 229)				frameHeight = ::Std_obj::parseInt(_hx_char->att->resolve(HX_("height",e7,07,4c,02)));
HXLINE( 230)				frame1->height = frameHeight;
HXLINE( 233)				if (_hx_char->has->resolve(HX_("xoffset",0b,42,4f,de))) {
HXLINE( 233)					xOffset = ::Std_obj::parseInt(_hx_char->att->resolve(HX_("xoffset",0b,42,4f,de)));
            				}
            				else {
HXLINE( 233)					xOffset = (int)0;
            				}
HXLINE( 235)				if (_hx_char->has->resolve(HX_("yoffset",cc,b8,e4,07))) {
HXLINE( 235)					yOffset = ::Std_obj::parseInt(_hx_char->att->resolve(HX_("yoffset",cc,b8,e4,07)));
            				}
            				else {
HXLINE( 235)					yOffset = (int)0;
            				}
HXLINE( 237)				if (_hx_char->has->resolve(HX_("xadvance",0a,87,b1,be))) {
HXLINE( 237)					xAdvance = ::Std_obj::parseInt(_hx_char->att->resolve(HX_("xadvance",0a,87,b1,be)));
            				}
            				else {
HXLINE( 237)					xAdvance = (int)0;
            				}
HXLINE( 239)				 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(xOffset,yOffset);
HXDLIN( 239)				point->_inPool = false;
HXDLIN( 239)				offset = point;
HXLINE( 241)				int _hx_tmp;
HXDLIN( 241)				if ((font->minOffsetX < -(xOffset))) {
HXLINE( 241)					_hx_tmp = -(xOffset);
            				}
            				else {
HXLINE( 241)					_hx_tmp = font->minOffsetX;
            				}
HXDLIN( 241)				font->minOffsetX = _hx_tmp;
HXLINE( 243)				charCode = (int)-1;
HXLINE( 244)				charStr = null();
HXLINE( 246)				if (_hx_char->has->resolve(HX_("letter",e6,ac,08,a3))) {
HXLINE( 248)					charStr = _hx_char->att->resolve(HX_("letter",e6,ac,08,a3));
            				}
            				else {
HXLINE( 250)					if (_hx_char->has->resolve(HX_("id",db,5b,00,00))) {
HXLINE( 252)						charCode = ::Std_obj::parseInt(_hx_char->att->resolve(HX_("id",db,5b,00,00)));
            					}
            				}
HXLINE( 255)				bool _hx_tmp1;
HXDLIN( 255)				if ((charCode == (int)-1)) {
HXLINE( 255)					_hx_tmp1 = hx::IsNull( charStr );
            				}
            				else {
HXLINE( 255)					_hx_tmp1 = false;
            				}
HXDLIN( 255)				if (_hx_tmp1) {
HXLINE( 257)					HX_STACK_DO_THROW(HX_("Invalid font xml data!",46,95,43,b9));
            				}
HXLINE( 260)				if (hx::IsNotNull( charStr )) {
HXLINE( 262)					::String _hx_switch_0 = charStr;
            					if (  (_hx_switch_0==HX_("&amp;",dd,d4,aa,21)) ){
HXLINE( 266)						charStr = HX_("&",26,00,00,00);
HXDLIN( 266)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_0==HX_("&gt;",08,a9,6c,19)) ){
HXLINE( 267)						charStr = HX_(">",3e,00,00,00);
HXDLIN( 267)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_0==HX_("&lt;",4d,74,70,19)) ){
HXLINE( 268)						charStr = HX_("<",3c,00,00,00);
HXDLIN( 268)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_0==HX_("&quot;",2c,d9,81,8f)) ){
HXLINE( 265)						charStr = HX_("\"",22,00,00,00);
HXDLIN( 265)						goto _hx_goto_16;
            					}
            					if (  (_hx_switch_0==HX_("space",c6,8c,66,81)) ){
HXLINE( 264)						charStr = HX_(" ",20,00,00,00);
HXDLIN( 264)						goto _hx_goto_16;
            					}
            					/* default */{
HXLINE( 269)						charStr = charStr;
            					}
            					_hx_goto_16:;
HXLINE( 272)					charCode = ::haxe::Utf8_obj::charCodeAt(charStr,(int)0);
            				}
HXLINE( 275)				font->addCharFrame(charCode,frame1,offset,xAdvance);
HXLINE( 277)				if ((charCode == (int)32)) {
HXLINE( 279)					font->spaceWidth = xAdvance;
            				}
            				else {
HXLINE( 283)					int _hx_tmp2;
HXDLIN( 283)					int font1 = font->lineHeight;
HXDLIN( 283)					if ((font1 > (frameHeight + yOffset))) {
HXLINE( 283)						_hx_tmp2 = font->lineHeight;
            					}
            					else {
HXLINE( 283)						_hx_tmp2 = (frameHeight + yOffset);
            					}
HXDLIN( 283)					font->lineHeight = _hx_tmp2;
            				}
            			}
            		}
HXLINE( 287)		font->updateSourceHeight();
HXLINE( 288)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxBitmapFont_obj,fromAngelCode,return )

 ::flixel::graphics::frames::FlxBitmapFont FlxBitmapFont_obj::fromXNA( ::Dynamic source,::String letters,hx::Null< int >  __o_charBGColor){
int charBGColor = __o_charBGColor.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_873f477e55df57ae_303_fromXNA)
HXLINE( 304)		 ::flixel::graphics::FlxGraphic graphic = null();
HXLINE( 305)		 ::flixel::graphics::frames::FlxFrame frame = null();
HXLINE( 307)		if (::Std_obj::is(source,hx::ClassOf< ::flixel::graphics::frames::FlxFrame >())) {
HXLINE( 309)			frame = ( ( ::flixel::graphics::frames::FlxFrame)(source) );
HXLINE( 310)			graphic = frame->parent;
            		}
            		else {
HXLINE( 314)			graphic = ::flixel::FlxG_obj::bitmap->add(source,null(),null());
HXLINE( 315)			frame = graphic->get_imageFrame()->get_frame();
            		}
HXLINE( 318)		 ::flixel::graphics::frames::FlxBitmapFont font = ::flixel::graphics::frames::FlxBitmapFont_obj::findFont(frame,null());
HXLINE( 319)		if (hx::IsNotNull( font )) {
HXLINE( 320)			return font;
            		}
HXLINE( 322)		if (hx::IsNull( letters )) {
HXLINE( 322)			letters = HX_(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",6f,61,48,0a);
            		}
            		else {
HXLINE( 322)			letters = letters;
            		}
HXLINE( 323)		font =  ::flixel::graphics::frames::FlxBitmapFont_obj::__alloc( HX_CTX ,frame,null());
HXLINE( 324)		font->fontName = graphic->key;
HXLINE( 326)		 ::openfl::_legacy::display::BitmapData bmd = graphic->bitmap;
HXLINE( 328)		 ::openfl::_legacy::geom::Point p =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 329)		p->setTo((int)0,(int)0);
HXLINE( 330)		{
HXLINE( 330)			Float x = p->x;
HXDLIN( 330)			Float y = p->y;
HXDLIN( 330)			if ((frame->angle == (int)-90)) {
HXLINE( 330)				p->x = (frame->frame->width - y);
HXDLIN( 330)				p->y = x;
            			}
            			else {
HXLINE( 330)				if ((frame->angle == (int)90)) {
HXLINE( 330)					p->x = y;
HXDLIN( 330)					p->y = (frame->frame->height - x);
            				}
            			}
HXDLIN( 330)			 ::openfl::_legacy::geom::Point p1 = p;
HXDLIN( 330)			p1->x = (p1->x + frame->frame->x);
HXDLIN( 330)			 ::openfl::_legacy::geom::Point p2 = p;
HXDLIN( 330)			p2->y = (p2->y + frame->frame->y);
            		}
HXLINE( 331)		int globalBGColor = ::Std_obj::_hx_int(p->x);
HXDLIN( 331)		int globalBGColor1 = bmd->getPixel(globalBGColor,::Std_obj::_hx_int(p->y));
HXLINE( 333)		int frameWidth = ::Std_obj::_hx_int(frame->frame->width);
HXLINE( 334)		int frameHeight = ::Std_obj::_hx_int(frame->frame->height);
HXLINE( 335)		int letterIdx = (int)0;
HXLINE( 336)		int charCode;
HXLINE( 337)		int numLetters = ::haxe::Utf8_obj::length(letters);
HXLINE( 338)		 ::flixel::math::FlxRect rect;
HXLINE( 339)		 ::flixel::math::FlxPoint offset;
HXLINE( 340)		int xAdvance;
HXLINE( 342)		int cy = (int)0;
HXLINE( 343)		int cx;
HXLINE( 345)		int gx;
HXLINE( 346)		int gy;
HXLINE( 347)		int gw;
HXLINE( 348)		int gh;
HXLINE( 350)		while(true){
HXLINE( 350)			bool _hx_tmp;
HXDLIN( 350)			if ((cy < frameHeight)) {
HXLINE( 350)				_hx_tmp = (letterIdx < numLetters);
            			}
            			else {
HXLINE( 350)				_hx_tmp = false;
            			}
HXDLIN( 350)			if (!(_hx_tmp)) {
HXLINE( 350)				goto _hx_goto_18;
            			}
HXLINE( 352)			int rowHeight = (int)0;
HXLINE( 353)			cx = (int)0;
HXLINE( 355)			while(true){
HXLINE( 355)				bool _hx_tmp1;
HXDLIN( 355)				if ((cx < frameWidth)) {
HXLINE( 355)					_hx_tmp1 = (letterIdx < numLetters);
            				}
            				else {
HXLINE( 355)					_hx_tmp1 = false;
            				}
HXDLIN( 355)				if (!(_hx_tmp1)) {
HXLINE( 355)					goto _hx_goto_19;
            				}
HXLINE( 357)				p->setTo(cx,cy);
HXLINE( 358)				{
HXLINE( 358)					Float x1 = p->x;
HXDLIN( 358)					Float y1 = p->y;
HXDLIN( 358)					if ((frame->angle == (int)-90)) {
HXLINE( 358)						p->x = (frame->frame->width - y1);
HXDLIN( 358)						p->y = x1;
            					}
            					else {
HXLINE( 358)						if ((frame->angle == (int)90)) {
HXLINE( 358)							p->x = y1;
HXDLIN( 358)							p->y = (frame->frame->height - x1);
            						}
            					}
HXDLIN( 358)					 ::openfl::_legacy::geom::Point p3 = p;
HXDLIN( 358)					p3->x = (p3->x + frame->frame->x);
HXDLIN( 358)					 ::openfl::_legacy::geom::Point p4 = p;
HXDLIN( 358)					p4->y = (p4->y + frame->frame->y);
            				}
HXLINE( 360)				int _hx_tmp2 = ::Std_obj::_hx_int(p->x);
HXDLIN( 360)				if ((bmd->getPixel(_hx_tmp2,::Std_obj::_hx_int(p->y)) != globalBGColor1)) {
HXLINE( 363)					gx = cx;
HXLINE( 364)					gy = cy;
HXLINE( 366)					p->setTo(gx,gy);
HXLINE( 367)					{
HXLINE( 367)						Float x2 = p->x;
HXDLIN( 367)						Float y2 = p->y;
HXDLIN( 367)						if ((frame->angle == (int)-90)) {
HXLINE( 367)							p->x = (frame->frame->width - y2);
HXDLIN( 367)							p->y = x2;
            						}
            						else {
HXLINE( 367)							if ((frame->angle == (int)90)) {
HXLINE( 367)								p->x = y2;
HXDLIN( 367)								p->y = (frame->frame->height - x2);
            							}
            						}
HXDLIN( 367)						 ::openfl::_legacy::geom::Point p5 = p;
HXDLIN( 367)						p5->x = (p5->x + frame->frame->x);
HXDLIN( 367)						 ::openfl::_legacy::geom::Point p6 = p;
HXDLIN( 367)						p6->y = (p6->y + frame->frame->y);
            					}
HXLINE( 370)					while(true){
HXLINE( 370)						int _hx_tmp3 = ::Std_obj::_hx_int(p->x);
HXDLIN( 370)						if (!((bmd->getPixel(_hx_tmp3,::Std_obj::_hx_int(p->y)) != globalBGColor1))) {
HXLINE( 370)							goto _hx_goto_20;
            						}
HXLINE( 372)						gx = (gx + (int)1);
HXLINE( 373)						p->setTo(gx,cy);
HXLINE( 374)						{
HXLINE( 374)							Float x3 = p->x;
HXDLIN( 374)							Float y3 = p->y;
HXDLIN( 374)							if ((frame->angle == (int)-90)) {
HXLINE( 374)								p->x = (frame->frame->width - y3);
HXDLIN( 374)								p->y = x3;
            							}
            							else {
HXLINE( 374)								if ((frame->angle == (int)90)) {
HXLINE( 374)									p->x = y3;
HXDLIN( 374)									p->y = (frame->frame->height - x3);
            								}
            							}
HXDLIN( 374)							 ::openfl::_legacy::geom::Point p7 = p;
HXDLIN( 374)							p7->x = (p7->x + frame->frame->x);
HXDLIN( 374)							 ::openfl::_legacy::geom::Point p8 = p;
HXDLIN( 374)							p8->y = (p8->y + frame->frame->y);
            						}
            					}
            					_hx_goto_20:;
HXLINE( 377)					p->setTo((gx - (int)1),gy);
HXLINE( 378)					{
HXLINE( 378)						Float x4 = p->x;
HXDLIN( 378)						Float y4 = p->y;
HXDLIN( 378)						if ((frame->angle == (int)-90)) {
HXLINE( 378)							p->x = (frame->frame->width - y4);
HXDLIN( 378)							p->y = x4;
            						}
            						else {
HXLINE( 378)							if ((frame->angle == (int)90)) {
HXLINE( 378)								p->x = y4;
HXDLIN( 378)								p->y = (frame->frame->height - x4);
            							}
            						}
HXDLIN( 378)						 ::openfl::_legacy::geom::Point p9 = p;
HXDLIN( 378)						p9->x = (p9->x + frame->frame->x);
HXDLIN( 378)						 ::openfl::_legacy::geom::Point p10 = p;
HXDLIN( 378)						p10->y = (p10->y + frame->frame->y);
            					}
HXLINE( 380)					while(true){
HXLINE( 380)						int _hx_tmp4 = ::Std_obj::_hx_int(p->x);
HXDLIN( 380)						if (!((bmd->getPixel(_hx_tmp4,::Std_obj::_hx_int(p->y)) != globalBGColor1))) {
HXLINE( 380)							goto _hx_goto_21;
            						}
HXLINE( 382)						gy = (gy + (int)1);
HXLINE( 383)						p->setTo(cx,gy);
HXLINE( 384)						{
HXLINE( 384)							Float x5 = p->x;
HXDLIN( 384)							Float y5 = p->y;
HXDLIN( 384)							if ((frame->angle == (int)-90)) {
HXLINE( 384)								p->x = (frame->frame->width - y5);
HXDLIN( 384)								p->y = x5;
            							}
            							else {
HXLINE( 384)								if ((frame->angle == (int)90)) {
HXLINE( 384)									p->x = y5;
HXDLIN( 384)									p->y = (frame->frame->height - x5);
            								}
            							}
HXDLIN( 384)							 ::openfl::_legacy::geom::Point p11 = p;
HXDLIN( 384)							p11->x = (p11->x + frame->frame->x);
HXDLIN( 384)							 ::openfl::_legacy::geom::Point p12 = p;
HXDLIN( 384)							p12->y = (p12->y + frame->frame->y);
            						}
            					}
            					_hx_goto_21:;
HXLINE( 387)					gw = (gx - cx);
HXLINE( 388)					gh = (gy - cy);
HXLINE( 390)					charCode = ::haxe::Utf8_obj::charCodeAt(letters,letterIdx);
HXLINE( 391)					 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 391)					_this->x = cx;
HXDLIN( 391)					_this->y = cy;
HXDLIN( 391)					_this->width = gw;
HXDLIN( 391)					_this->height = gh;
HXDLIN( 391)					 ::flixel::math::FlxRect rect1 = _this;
HXDLIN( 391)					rect1->_inPool = false;
HXDLIN( 391)					rect = rect1;
HXLINE( 392)					 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 392)					point->_inPool = false;
HXDLIN( 392)					offset = point;
HXLINE( 393)					xAdvance = gw;
HXLINE( 395)					font->addCharFrame(charCode,rect,offset,xAdvance);
HXLINE( 397)					if ((charCode == (int)32)) {
HXLINE( 399)						font->spaceWidth = xAdvance;
            					}
HXLINE( 403)					if ((gh > rowHeight)) {
HXLINE( 403)						rowHeight = gh;
            					}
HXLINE( 404)					if ((gh > font->size)) {
HXLINE( 404)						font->size = gh;
            					}
HXLINE( 407)					cx = (cx + gw);
HXLINE( 408)					letterIdx = (letterIdx + (int)1);
            				}
HXLINE( 411)				cx = (cx + (int)1);
            			}
            			_hx_goto_19:;
HXLINE( 415)			cy = (cy + (rowHeight + (int)1));
            		}
            		_hx_goto_18:;
HXLINE( 418)		font->lineHeight = font->size;
HXLINE( 419)		font->updateSourceHeight();
HXLINE( 422)		 ::openfl::_legacy::geom::Point _hx_tmp5 = ::flixel::graphics::frames::FlxBitmapFont_obj::point;
HXDLIN( 422)		int _hx_tmp6 = ::Std_obj::_hx_int(frame->frame->x);
HXDLIN( 422)		_hx_tmp5->setTo(_hx_tmp6,::Std_obj::_hx_int(frame->frame->y));
HXLINE( 424)		 ::openfl::_legacy::geom::Rectangle frameRect = ::flixel::graphics::frames::FlxBitmapFont_obj::flashRect;
HXLINE( 425)		{
HXLINE( 425)			 ::flixel::math::FlxRect _this1 = frame->frame;
HXDLIN( 425)			 ::openfl::_legacy::geom::Rectangle FlashRect = frameRect;
HXDLIN( 425)			if (hx::IsNull( FlashRect )) {
HXLINE( 425)				FlashRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXDLIN( 425)			FlashRect->x = _this1->x;
HXDLIN( 425)			FlashRect->y = _this1->y;
HXDLIN( 425)			FlashRect->width = _this1->width;
HXDLIN( 425)			FlashRect->height = _this1->height;
            		}
HXLINE( 434)		if ((charBGColor != (int)0)) {
HXLINE( 436)			bmd->threshold(bmd,frameRect,::flixel::graphics::frames::FlxBitmapFont_obj::point,HX_("==",60,35,00,00),charBGColor,(int)0,(int)-1,true);
            		}
HXLINE( 439)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxBitmapFont_obj,fromXNA,return )

 ::openfl::_legacy::geom::Point FlxBitmapFont_obj::transformPoint( ::openfl::_legacy::geom::Point point, ::flixel::graphics::frames::FlxFrame frame){
            	HX_STACKFRAME(&_hx_pos_873f477e55df57ae_443_transformPoint)
HXLINE( 444)		Float x = point->x;
HXLINE( 445)		Float y = point->y;
HXLINE( 447)		if ((frame->angle == (int)-90)) {
HXLINE( 449)			point->x = (frame->frame->width - y);
HXLINE( 450)			point->y = x;
            		}
            		else {
HXLINE( 453)			if ((frame->angle == (int)90)) {
HXLINE( 455)				point->x = y;
HXLINE( 456)				point->y = (frame->frame->height - x);
            			}
            		}
HXLINE( 459)		 ::openfl::_legacy::geom::Point point1 = point;
HXDLIN( 459)		point1->x = (point1->x + frame->frame->x);
HXLINE( 460)		 ::openfl::_legacy::geom::Point point2 = point;
HXDLIN( 460)		point2->y = (point2->y + frame->frame->y);
HXLINE( 461)		return point;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxBitmapFont_obj,transformPoint,return )

 ::flixel::graphics::frames::FlxBitmapFont FlxBitmapFont_obj::fromMonospace( ::Dynamic source,::String letters, ::flixel::math::FlxPoint charSize, ::flixel::math::FlxRect region, ::flixel::math::FlxPoint spacing){
            	HX_GC_STACKFRAME(&_hx_pos_873f477e55df57ae_478_fromMonospace)
HXLINE( 479)		 ::flixel::graphics::FlxGraphic graphic = null();
HXLINE( 480)		 ::flixel::graphics::frames::FlxFrame frame = null();
HXLINE( 482)		if (::Std_obj::is(source,hx::ClassOf< ::flixel::graphics::frames::FlxFrame >())) {
HXLINE( 484)			frame = ( ( ::flixel::graphics::frames::FlxFrame)(source) );
HXLINE( 485)			graphic = frame->parent;
            		}
            		else {
HXLINE( 489)			graphic = ::flixel::FlxG_obj::bitmap->add(source,null(),null());
HXLINE( 490)			frame = graphic->get_imageFrame()->get_frame();
            		}
HXLINE( 493)		 ::flixel::graphics::frames::FlxBitmapFont font = ::flixel::graphics::frames::FlxBitmapFont_obj::findFont(frame,null());
HXLINE( 494)		if (hx::IsNotNull( font )) {
HXLINE( 495)			return font;
            		}
HXLINE( 497)		if (hx::IsNull( letters )) {
HXLINE( 497)			letters = HX_(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",6f,61,48,0a);
            		}
            		else {
HXLINE( 497)			letters = letters;
            		}
HXLINE( 498)		if (hx::IsNull( region )) {
HXLINE( 498)			Float Width = frame->sourceSize->x;
HXDLIN( 498)			Float Height = frame->sourceSize->y;
HXDLIN( 498)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 498)			_this->x = (int)0;
HXDLIN( 498)			_this->y = (int)0;
HXDLIN( 498)			_this->width = Width;
HXDLIN( 498)			_this->height = Height;
HXDLIN( 498)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 498)			rect->_inPool = false;
HXDLIN( 498)			 ::flixel::math::FlxRect rect1 = rect;
HXDLIN( 498)			rect1->_weak = true;
HXDLIN( 498)			region = rect1;
            		}
            		else {
HXLINE( 498)			region = region;
            		}
HXLINE( 499)		if (hx::IsNull( spacing )) {
HXLINE( 499)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 499)			point->_inPool = false;
HXDLIN( 499)			spacing = point;
            		}
            		else {
HXLINE( 499)			spacing = spacing;
            		}
HXLINE( 501)		int bitmapWidth = ::Std_obj::_hx_int(region->width);
HXLINE( 502)		int bitmapHeight = ::Std_obj::_hx_int(region->height);
HXLINE( 504)		int startX = ::Std_obj::_hx_int(region->x);
HXLINE( 505)		int startY = ::Std_obj::_hx_int(region->y);
HXLINE( 507)		if (region->_weak) {
HXLINE( 507)			if (!(region->_inPool)) {
HXLINE( 507)				region->_inPool = true;
HXDLIN( 507)				region->_weak = false;
HXDLIN( 507)				::flixel::math::FlxRect_obj::_pool->putUnsafe(region);
            			}
            		}
HXLINE( 509)		int xSpacing = ::Std_obj::_hx_int(spacing->x);
HXLINE( 510)		int ySpacing = ::Std_obj::_hx_int(spacing->y);
HXLINE( 512)		int charWidth = ::Std_obj::_hx_int(charSize->x);
HXLINE( 513)		int charHeight = ::Std_obj::_hx_int(charSize->y);
HXLINE( 515)		int spacedWidth = (charWidth + xSpacing);
HXLINE( 516)		int spacedHeight = (charHeight + ySpacing);
HXLINE( 518)		int numRows;
HXDLIN( 518)		if ((charHeight == (int)0)) {
HXLINE( 518)			numRows = (int)1;
            		}
            		else {
HXLINE( 518)			numRows = ::Std_obj::_hx_int(((Float)(bitmapHeight + ySpacing) / (Float)spacedHeight));
            		}
HXLINE( 519)		int numCols;
HXDLIN( 519)		if ((charWidth == (int)0)) {
HXLINE( 519)			numCols = (int)1;
            		}
            		else {
HXLINE( 519)			numCols = ::Std_obj::_hx_int(((Float)(bitmapWidth + xSpacing) / (Float)spacedWidth));
            		}
HXLINE( 521)		font =  ::flixel::graphics::frames::FlxBitmapFont_obj::__alloc( HX_CTX ,frame,null());
HXLINE( 522)		font->fontName = graphic->key;
HXLINE( 523)		font->lineHeight = (font->size = charHeight);
HXLINE( 525)		 ::flixel::math::FlxRect charRect;
HXLINE( 526)		 ::flixel::math::FlxPoint offset;
HXLINE( 527)		int xAdvance = charWidth;
HXLINE( 528)		font->spaceWidth = xAdvance;
HXLINE( 529)		int letterIndex = (int)0;
HXLINE( 530)		int numLetters = ::haxe::Utf8_obj::length(letters);
HXLINE( 532)		{
HXLINE( 532)			int _g1 = (int)0;
HXDLIN( 532)			int _g = numRows;
HXDLIN( 532)			while((_g1 < _g)){
HXLINE( 532)				_g1 = (_g1 + (int)1);
HXDLIN( 532)				int j = (_g1 - (int)1);
HXLINE( 534)				{
HXLINE( 534)					int _g3 = (int)0;
HXDLIN( 534)					int _g2 = numCols;
HXDLIN( 534)					while((_g3 < _g2)){
HXLINE( 534)						_g3 = (_g3 + (int)1);
HXDLIN( 534)						int i = (_g3 - (int)1);
HXLINE( 536)						 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 536)						_this1->x = (startX + (i * spacedWidth));
HXDLIN( 536)						_this1->y = (startY + (j * spacedHeight));
HXDLIN( 536)						_this1->width = charWidth;
HXDLIN( 536)						_this1->height = charHeight;
HXDLIN( 536)						 ::flixel::math::FlxRect rect2 = _this1;
HXDLIN( 536)						rect2->_inPool = false;
HXDLIN( 536)						charRect = rect2;
HXLINE( 537)						 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 537)						point1->_inPool = false;
HXDLIN( 537)						offset = point1;
HXLINE( 538)						font->addCharFrame(::haxe::Utf8_obj::charCodeAt(letters,letterIndex),charRect,offset,xAdvance);
HXLINE( 539)						letterIndex = (letterIndex + (int)1);
HXLINE( 541)						if ((letterIndex >= numLetters)) {
HXLINE( 543)							return font;
            						}
            					}
            				}
            			}
            		}
HXLINE( 548)		font->updateSourceHeight();
HXLINE( 549)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxBitmapFont_obj,fromMonospace,return )

 ::flixel::graphics::frames::FlxBitmapFont FlxBitmapFont_obj::findFont( ::flixel::graphics::frames::FlxFrame frame, ::flixel::math::FlxPoint border){
            	HX_STACKFRAME(&_hx_pos_873f477e55df57ae_612_findFont)
HXLINE( 613)		if (hx::IsNull( border )) {
HXLINE( 614)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 614)			point->_inPool = false;
HXDLIN( 614)			 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 614)			point1->_weak = true;
HXDLIN( 614)			border = point1;
            		}
HXLINE( 616)		 ::flixel::graphics::FlxGraphic _this = frame->parent;
HXDLIN( 616)		 ::flixel::graphics::frames::FlxFrameCollectionType type = ::flixel::graphics::frames::FlxFrameCollectionType_obj::FONT_dyn();
HXDLIN( 616)		::cpp::VirtualArray collections = ( (::cpp::VirtualArray)(::haxe::IMap_obj::get(_this->frameCollections,type)) );
HXDLIN( 616)		if (hx::IsNull( collections )) {
HXLINE( 616)			collections = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 616)			::haxe::IMap_obj::set(_this->frameCollections,type,collections);
            		}
HXDLIN( 616)		::Array< ::Dynamic> bitmapFonts = collections;
HXLINE( 617)		{
HXLINE( 617)			int _g = (int)0;
HXDLIN( 617)			while((_g < bitmapFonts->length)){
HXLINE( 617)				 ::flixel::graphics::frames::FlxBitmapFont font = bitmapFonts->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxBitmapFont >();
HXDLIN( 617)				_g = (_g + (int)1);
HXLINE( 619)				bool _hx_tmp;
HXDLIN( 619)				if (hx::IsEq( font->frame,frame )) {
HXLINE( 619)					 ::flixel::math::FlxPoint _this1 = font->border;
HXDLIN( 619)					bool result;
HXDLIN( 619)					if ((::Math_obj::abs((_this1->x - border->x)) <= ((Float)0.0000001))) {
HXLINE( 619)						result = (::Math_obj::abs((_this1->y - border->y)) <= ((Float)0.0000001));
            					}
            					else {
HXLINE( 619)						result = false;
            					}
HXDLIN( 619)					if (border->_weak) {
HXLINE( 619)						border->put();
            					}
HXDLIN( 619)					_hx_tmp = result;
            				}
            				else {
HXLINE( 619)					_hx_tmp = false;
            				}
HXDLIN( 619)				if (_hx_tmp) {
HXLINE( 621)					return font;
            				}
            			}
            		}
HXLINE( 624)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxBitmapFont_obj,findFont,return )


hx::ObjectPtr< FlxBitmapFont_obj > FlxBitmapFont_obj::__new( ::flixel::graphics::frames::FlxFrame frame, ::flixel::math::FlxPoint border) {
	hx::ObjectPtr< FlxBitmapFont_obj > __this = new FlxBitmapFont_obj();
	__this->__construct(frame,border);
	return __this;
}

hx::ObjectPtr< FlxBitmapFont_obj > FlxBitmapFont_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::graphics::frames::FlxFrame frame, ::flixel::math::FlxPoint border) {
	FlxBitmapFont_obj *__this = (FlxBitmapFont_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxBitmapFont_obj), true, "flixel.graphics.frames.FlxBitmapFont"));
	*(void **)__this = FlxBitmapFont_obj::_hx_vtable;
	__this->__construct(frame,border);
	return __this;
}

FlxBitmapFont_obj::FlxBitmapFont_obj()
{
}

void FlxBitmapFont_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxBitmapFont);
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(lineHeight,"lineHeight");
	HX_MARK_MEMBER_NAME(bold,"bold");
	HX_MARK_MEMBER_NAME(italic,"italic");
	HX_MARK_MEMBER_NAME(fontName,"fontName");
	HX_MARK_MEMBER_NAME(numLetters,"numLetters");
	HX_MARK_MEMBER_NAME(minOffsetX,"minOffsetX");
	HX_MARK_MEMBER_NAME(spaceWidth,"spaceWidth");
	HX_MARK_MEMBER_NAME(charMap,"charMap");
	HX_MARK_MEMBER_NAME(charAdvance,"charAdvance");
	HX_MARK_MEMBER_NAME(frame,"frame");
	 ::flixel::graphics::frames::FlxFramesCollection_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxBitmapFont_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(lineHeight,"lineHeight");
	HX_VISIT_MEMBER_NAME(bold,"bold");
	HX_VISIT_MEMBER_NAME(italic,"italic");
	HX_VISIT_MEMBER_NAME(fontName,"fontName");
	HX_VISIT_MEMBER_NAME(numLetters,"numLetters");
	HX_VISIT_MEMBER_NAME(minOffsetX,"minOffsetX");
	HX_VISIT_MEMBER_NAME(spaceWidth,"spaceWidth");
	HX_VISIT_MEMBER_NAME(charMap,"charMap");
	HX_VISIT_MEMBER_NAME(charAdvance,"charAdvance");
	HX_VISIT_MEMBER_NAME(frame,"frame");
	 ::flixel::graphics::frames::FlxFramesCollection_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxBitmapFont_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size ); }
		if (HX_FIELD_EQ(inName,"bold") ) { return hx::Val( bold ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"italic") ) { return hx::Val( italic ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"charMap") ) { return hx::Val( charMap ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fontName") ) { return hx::Val( fontName ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addBorder") ) { return hx::Val( addBorder_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lineHeight") ) { return hx::Val( lineHeight ); }
		if (HX_FIELD_EQ(inName,"numLetters") ) { return hx::Val( numLetters ); }
		if (HX_FIELD_EQ(inName,"minOffsetX") ) { return hx::Val( minOffsetX ); }
		if (HX_FIELD_EQ(inName,"spaceWidth") ) { return hx::Val( spaceWidth ); }
		if (HX_FIELD_EQ(inName,"charExists") ) { return hx::Val( charExists_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"charAdvance") ) { return hx::Val( charAdvance ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addCharFrame") ) { return hx::Val( addCharFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCharFrame") ) { return hx::Val( getCharFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCharWidth") ) { return hx::Val( getCharWidth_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getCharAdvance") ) { return hx::Val( getCharAdvance_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"updateSourceHeight") ) { return hx::Val( updateSourceHeight_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxBitmapFont_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { outValue = ( point ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromXNA") ) { outValue = fromXNA_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findFont") ) { outValue = findFont_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"flashRect") ) { outValue = ( flashRect ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromAngelCode") ) { outValue = fromAngelCode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromMonospace") ) { outValue = fromMonospace_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getDefaultFont") ) { outValue = getDefaultFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"transformPoint") ) { outValue = transformPoint_dyn(); return true; }
	}
	return false;
}

hx::Val FlxBitmapFont_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bold") ) { bold=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { frame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"italic") ) { italic=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"charMap") ) { charMap=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fontName") ) { fontName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lineHeight") ) { lineHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLetters") ) { numLetters=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minOffsetX") ) { minOffsetX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spaceWidth") ) { spaceWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"charAdvance") ) { charAdvance=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxBitmapFont_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { point=ioValue.Cast<  ::openfl::_legacy::geom::Point >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"flashRect") ) { flashRect=ioValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return true; }
	}
	return false;
}

void FlxBitmapFont_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("lineHeight","\xfb","\x02","\xf4","\xd6"));
	outFields->push(HX_HCSTRING("bold","\x85","\x81","\x1b","\x41"));
	outFields->push(HX_HCSTRING("italic","\xf0","\x2e","\x64","\x06"));
	outFields->push(HX_HCSTRING("fontName","\xba","\x8f","\x7d","\xcb"));
	outFields->push(HX_HCSTRING("numLetters","\x27","\xdb","\xae","\x34"));
	outFields->push(HX_HCSTRING("minOffsetX","\xf3","\x55","\x1c","\x9d"));
	outFields->push(HX_HCSTRING("spaceWidth","\x60","\x8b","\x97","\x2b"));
	outFields->push(HX_HCSTRING("charMap","\x66","\xcd","\x5d","\xcf"));
	outFields->push(HX_HCSTRING("charAdvance","\x4c","\xf8","\x90","\x16"));
	outFields->push(HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxBitmapFont_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FlxBitmapFont_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{hx::fsInt,(int)offsetof(FlxBitmapFont_obj,lineHeight),HX_HCSTRING("lineHeight","\xfb","\x02","\xf4","\xd6")},
	{hx::fsBool,(int)offsetof(FlxBitmapFont_obj,bold),HX_HCSTRING("bold","\x85","\x81","\x1b","\x41")},
	{hx::fsBool,(int)offsetof(FlxBitmapFont_obj,italic),HX_HCSTRING("italic","\xf0","\x2e","\x64","\x06")},
	{hx::fsString,(int)offsetof(FlxBitmapFont_obj,fontName),HX_HCSTRING("fontName","\xba","\x8f","\x7d","\xcb")},
	{hx::fsInt,(int)offsetof(FlxBitmapFont_obj,numLetters),HX_HCSTRING("numLetters","\x27","\xdb","\xae","\x34")},
	{hx::fsInt,(int)offsetof(FlxBitmapFont_obj,minOffsetX),HX_HCSTRING("minOffsetX","\xf3","\x55","\x1c","\x9d")},
	{hx::fsInt,(int)offsetof(FlxBitmapFont_obj,spaceWidth),HX_HCSTRING("spaceWidth","\x60","\x8b","\x97","\x2b")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(FlxBitmapFont_obj,charMap),HX_HCSTRING("charMap","\x66","\xcd","\x5d","\xcf")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(FlxBitmapFont_obj,charAdvance),HX_HCSTRING("charAdvance","\x4c","\xf8","\x90","\x16")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFrame*/ ,(int)offsetof(FlxBitmapFont_obj,frame),HX_HCSTRING("frame","\x2d","\x78","\x83","\x06")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxBitmapFont_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxBitmapFont_obj::SPACE_CODE,HX_HCSTRING("SPACE_CODE","\xa6","\x36","\xb9","\x21")},
	{hx::fsInt,(void *) &FlxBitmapFont_obj::TAB_CODE,HX_HCSTRING("TAB_CODE","\xb7","\xfe","\xa4","\x96")},
	{hx::fsInt,(void *) &FlxBitmapFont_obj::NEW_LINE_CODE,HX_HCSTRING("NEW_LINE_CODE","\x99","\x18","\x46","\x31")},
	{hx::fsString,(void *) &FlxBitmapFont_obj::DEFAULT_FONT_KEY,HX_HCSTRING("DEFAULT_FONT_KEY","\x6d","\x52","\xec","\xbd")},
	{hx::fsString,(void *) &FlxBitmapFont_obj::DEFAULT_FONT_DATA,HX_HCSTRING("DEFAULT_FONT_DATA","\x7c","\x41","\x38","\x6c")},
	{hx::fsString,(void *) &FlxBitmapFont_obj::DEFAULT_CHARS,HX_HCSTRING("DEFAULT_CHARS","\x5f","\x77","\x29","\xb9")},
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(void *) &FlxBitmapFont_obj::point,HX_HCSTRING("point","\x50","\xb4","\x8f","\xc6")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(void *) &FlxBitmapFont_obj::flashRect,HX_HCSTRING("flashRect","\xf4","\x46","\x51","\x02")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxBitmapFont_obj_sMemberFields[] = {
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("lineHeight","\xfb","\x02","\xf4","\xd6"),
	HX_HCSTRING("bold","\x85","\x81","\x1b","\x41"),
	HX_HCSTRING("italic","\xf0","\x2e","\x64","\x06"),
	HX_HCSTRING("fontName","\xba","\x8f","\x7d","\xcb"),
	HX_HCSTRING("numLetters","\x27","\xdb","\xae","\x34"),
	HX_HCSTRING("minOffsetX","\xf3","\x55","\x1c","\x9d"),
	HX_HCSTRING("spaceWidth","\x60","\x8b","\x97","\x2b"),
	HX_HCSTRING("charMap","\x66","\xcd","\x5d","\xcf"),
	HX_HCSTRING("charAdvance","\x4c","\xf8","\x90","\x16"),
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("addCharFrame","\x16","\x23","\x30","\xbf"),
	HX_HCSTRING("updateSourceHeight","\xcb","\xfe","\x5f","\x70"),
	HX_HCSTRING("charExists","\x52","\xb5","\xff","\x33"),
	HX_HCSTRING("getCharFrame","\x01","\x9e","\x32","\xcf"),
	HX_HCSTRING("getCharAdvance","\x56","\x4b","\x2f","\x9e"),
	HX_HCSTRING("getCharWidth","\xda","\xdb","\x11","\x93"),
	HX_HCSTRING("addBorder","\xed","\x81","\x3e","\x1c"),
	::String(null()) };

static void FlxBitmapFont_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxBitmapFont_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxBitmapFont_obj::SPACE_CODE,"SPACE_CODE");
	HX_MARK_MEMBER_NAME(FlxBitmapFont_obj::TAB_CODE,"TAB_CODE");
	HX_MARK_MEMBER_NAME(FlxBitmapFont_obj::NEW_LINE_CODE,"NEW_LINE_CODE");
	HX_MARK_MEMBER_NAME(FlxBitmapFont_obj::DEFAULT_FONT_KEY,"DEFAULT_FONT_KEY");
	HX_MARK_MEMBER_NAME(FlxBitmapFont_obj::DEFAULT_FONT_DATA,"DEFAULT_FONT_DATA");
	HX_MARK_MEMBER_NAME(FlxBitmapFont_obj::DEFAULT_CHARS,"DEFAULT_CHARS");
	HX_MARK_MEMBER_NAME(FlxBitmapFont_obj::point,"point");
	HX_MARK_MEMBER_NAME(FlxBitmapFont_obj::flashRect,"flashRect");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxBitmapFont_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxBitmapFont_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxBitmapFont_obj::SPACE_CODE,"SPACE_CODE");
	HX_VISIT_MEMBER_NAME(FlxBitmapFont_obj::TAB_CODE,"TAB_CODE");
	HX_VISIT_MEMBER_NAME(FlxBitmapFont_obj::NEW_LINE_CODE,"NEW_LINE_CODE");
	HX_VISIT_MEMBER_NAME(FlxBitmapFont_obj::DEFAULT_FONT_KEY,"DEFAULT_FONT_KEY");
	HX_VISIT_MEMBER_NAME(FlxBitmapFont_obj::DEFAULT_FONT_DATA,"DEFAULT_FONT_DATA");
	HX_VISIT_MEMBER_NAME(FlxBitmapFont_obj::DEFAULT_CHARS,"DEFAULT_CHARS");
	HX_VISIT_MEMBER_NAME(FlxBitmapFont_obj::point,"point");
	HX_VISIT_MEMBER_NAME(FlxBitmapFont_obj::flashRect,"flashRect");
};

#endif

hx::Class FlxBitmapFont_obj::__mClass;

static ::String FlxBitmapFont_obj_sStaticFields[] = {
	HX_HCSTRING("SPACE_CODE","\xa6","\x36","\xb9","\x21"),
	HX_HCSTRING("TAB_CODE","\xb7","\xfe","\xa4","\x96"),
	HX_HCSTRING("NEW_LINE_CODE","\x99","\x18","\x46","\x31"),
	HX_HCSTRING("DEFAULT_FONT_KEY","\x6d","\x52","\xec","\xbd"),
	HX_HCSTRING("DEFAULT_FONT_DATA","\x7c","\x41","\x38","\x6c"),
	HX_HCSTRING("DEFAULT_CHARS","\x5f","\x77","\x29","\xb9"),
	HX_HCSTRING("point","\x50","\xb4","\x8f","\xc6"),
	HX_HCSTRING("flashRect","\xf4","\x46","\x51","\x02"),
	HX_HCSTRING("getDefaultFont","\x3a","\xaa","\x1d","\x9d"),
	HX_HCSTRING("fromAngelCode","\xc4","\xcc","\x21","\x6e"),
	HX_HCSTRING("fromXNA","\x61","\x23","\x06","\x58"),
	HX_HCSTRING("transformPoint","\x44","\xcf","\x11","\x3d"),
	HX_HCSTRING("fromMonospace","\xf9","\x0e","\xcf","\xd2"),
	HX_HCSTRING("findFont","\xa8","\x6a","\x54","\x96"),
	::String(null())
};

void FlxBitmapFont_obj::__register()
{
	hx::Object *dummy = new FlxBitmapFont_obj;
	FlxBitmapFont_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.graphics.frames.FlxBitmapFont","\x79","\xe8","\x86","\xf0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxBitmapFont_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxBitmapFont_obj::__SetStatic;
	__mClass->mMarkFunc = FlxBitmapFont_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxBitmapFont_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxBitmapFont_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxBitmapFont_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxBitmapFont_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxBitmapFont_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxBitmapFont_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxBitmapFont_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_873f477e55df57ae_25_boot)
HXDLIN(  25)		SPACE_CODE = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_873f477e55df57ae_26_boot)
HXDLIN(  26)		TAB_CODE = (int)9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_873f477e55df57ae_27_boot)
HXDLIN(  27)		NEW_LINE_CODE = (int)10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_873f477e55df57ae_29_boot)
HXDLIN(  29)		DEFAULT_FONT_KEY = HX_("DEFAULT_FONT_KEY",6d,52,ec,bd);
            	}
{
            	HX_STACKFRAME(&_hx_pos_873f477e55df57ae_31_boot)
HXDLIN(  31)		DEFAULT_FONT_DATA = HX_(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",b9,ed,10,8a);
            	}
{
            	HX_STACKFRAME(&_hx_pos_873f477e55df57ae_36_boot)
HXDLIN(  36)		DEFAULT_CHARS = HX_(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",6f,61,48,0a);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_873f477e55df57ae_38_boot)
HXDLIN(  38)		point =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_873f477e55df57ae_39_boot)
HXDLIN(  39)		flashRect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace flixel
} // end namespace graphics
} // end namespace frames
