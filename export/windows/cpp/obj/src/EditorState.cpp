// Generated by Haxe 3.4.5
#include <hxcpp.h>

#ifndef INCLUDED_EditorState
#include <EditorState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseEventManager
#include <flixel/input/mouse/FlxMouseEventManager.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_PluginFrontEnd
#include <flixel/system/frontEnds/PluginFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapAutoTiling
#include <flixel/tile/FlxTilemapAutoTiling.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBitmapTextButton
#include <flixel/ui/FlxBitmapTextButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxBitmapText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxBitmapText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_157af214485eddd8_17_new,"EditorState","new",0xd42e7bf6,"EditorState.new","EditorState.hx",17,0x9d13b43a)
HX_LOCAL_STACK_FRAME(_hx_pos_157af214485eddd8_128_create,"EditorState","create",0x77179d26,"EditorState.create","EditorState.hx",128,0x9d13b43a)
HX_LOCAL_STACK_FRAME(_hx_pos_157af214485eddd8_129_create,"EditorState","create",0x77179d26,"EditorState.create","EditorState.hx",129,0x9d13b43a)
HX_LOCAL_STACK_FRAME(_hx_pos_157af214485eddd8_130_create,"EditorState","create",0x77179d26,"EditorState.create","EditorState.hx",130,0x9d13b43a)
HX_LOCAL_STACK_FRAME(_hx_pos_157af214485eddd8_61_create,"EditorState","create",0x77179d26,"EditorState.create","EditorState.hx",61,0x9d13b43a)
HX_LOCAL_STACK_FRAME(_hx_pos_157af214485eddd8_159_setActiveLayer,"EditorState","setActiveLayer",0x3e8d2dd3,"EditorState.setActiveLayer","EditorState.hx",159,0x9d13b43a)
HX_LOCAL_STACK_FRAME(_hx_pos_157af214485eddd8_169_saveLevel,"EditorState","saveLevel",0x68509d1d,"EditorState.saveLevel","EditorState.hx",169,0x9d13b43a)
HX_LOCAL_STACK_FRAME(_hx_pos_157af214485eddd8_175_update,"EditorState","update",0x820dbc33,"EditorState.update","EditorState.hx",175,0x9d13b43a)

void EditorState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_157af214485eddd8_17_new)
HXLINE(  59)		this->roomY = (int)1000;
HXLINE(  58)		this->roomX = (int)1000;
HXLINE(  54)		this->activeLayer = (int)1;
HXLINE(  38)		this->currentTileIndex = (int)0;
HXLINE(  17)		super::__construct(MaxSize);
            	}

Dynamic EditorState_obj::__CreateEmpty() { return new EditorState_obj; }

void *EditorState_obj::_hx_vtable = 0;

Dynamic EditorState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EditorState_obj > _hx_result = new EditorState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool EditorState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x5a2dad3c;
	}
}

void EditorState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f) HXARGC(1)
            		void _hx_run( ::flixel::text::FlxText a1){
            			HX_GC_STACKFRAME(&_hx_pos_157af214485eddd8_128_create)
HXLINE( 128)			f(a1,(int)0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,f1) HXARGC(1)
            		void _hx_run( ::flixel::text::FlxText a11){
            			HX_GC_STACKFRAME(&_hx_pos_157af214485eddd8_129_create)
HXLINE( 129)			f1(a11,(int)1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::Dynamic,f2) HXARGC(1)
            		void _hx_run( ::flixel::text::FlxText a12){
            			HX_GC_STACKFRAME(&_hx_pos_157af214485eddd8_130_create)
HXLINE( 130)			f2(a12,(int)2);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_157af214485eddd8_61_create)
HXLINE(  63)		::flixel::FlxG_obj::resizeWindow((int)696,(int)500);
HXLINE(  64)		::flixel::FlxG_obj::scaleMode->onMeasure((int)696,(int)500);
HXLINE(  65)		{
HXLINE(  65)			 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN(  65)			_this->set_x((int)0);
HXDLIN(  65)			_this->set_y((int)0);
            		}
HXLINE(  66)		::flixel::FlxG_obj::camera->set_zoom((int)1);
HXLINE(  70)		 ::flixel::_hx_system::frontEnds::PluginFrontEnd _hx_tmp = ::flixel::FlxG_obj::plugins;
HXDLIN(  70)		_hx_tmp->add_flixel_input_mouse_FlxMouseEventManager( ::flixel::input::mouse::FlxMouseEventManager_obj::__alloc( HX_CTX ));
HXLINE(  72)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  72)		{
HXLINE(  72)			int _g2 = (int)0;
HXDLIN(  72)			int _g1 = (int)10;
HXDLIN(  72)			while((_g2 < _g1)){
HXLINE(  72)				_g2 = (_g2 + (int)1);
HXDLIN(  72)				int i = (_g2 - (int)1);
HXDLIN(  72)				::Array< int > _g3 = ::Array_obj< int >::__new(0);
HXDLIN(  72)				{
HXLINE(  72)					int _g5 = (int)0;
HXDLIN(  72)					int _g4 = (int)24;
HXDLIN(  72)					while((_g5 < _g4)){
HXLINE(  72)						_g5 = (_g5 + (int)1);
HXDLIN(  72)						int i1 = (_g5 - (int)1);
HXDLIN(  72)						_g3->push((int)0);
            					}
            				}
HXDLIN(  72)				_g->push(_g3);
            			}
            		}
HXDLIN(  72)		::Array< ::Dynamic> empty = _g;
HXLINE(  74)		 ::Dynamic _hx_tmp1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(HX_("#FC5C7D",3b,b2,7e,63));
HXDLIN(  74)		this->background = ::flixel::util::FlxGradient_obj::createGradientFlxSprite((int)600,(int)240,::Array_obj< int >::__new(2)->init(0,_hx_tmp1)->init(1,::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(HX_("#6A82FB",e4,8d,ea,d8))),(int)1,(int)90,true);
HXLINE(  76)		this->tilesBG =  ::flixel::tile::FlxTilemap_obj::__alloc( HX_CTX );
HXLINE(  77)		this->tilesFG =  ::flixel::tile::FlxTilemap_obj::__alloc( HX_CTX );
HXLINE(  78)		this->tilesCollision =  ::flixel::tile::FlxTilemap_obj::__alloc( HX_CTX );
HXLINE(  80)		this->tilesBG->useScaleHack = false;
HXLINE(  81)		this->tilesFG->useScaleHack = false;
HXLINE(  82)		this->tilesCollision->useScaleHack = false;
HXLINE(  83)		this->tilesBG->loadMapFrom2DArray(empty,HX_("assets/images/tilesets/Tileset1.png",5d,c1,fd,f9),(int)24,(int)24,null(),null(),null(),null());
HXLINE(  84)		this->tilesCollision->loadMapFrom2DArray(empty,HX_("assets/images/tilesets/Tileset1.png",5d,c1,fd,f9),(int)24,(int)24,null(),null(),null(),null());
HXLINE(  85)		this->tilesFG->loadMapFrom2DArray(empty,HX_("assets/images/tilesets/Tileset1.png",5d,c1,fd,f9),(int)24,(int)24,null(),null(),null(),null());
HXLINE(  87)		this->activeTilemap = this->tilesBG;
HXLINE(  89)		this->levelRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)600,(int)240);
HXLINE(  91)		this->objectsBG =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  92)		this->objects =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  93)		this->objectsFG =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  95)		this->titleText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)10,(int)10,(int)100,HX_("Editor Mode",b6,b2,73,85),null(),null());
HXLINE(  97)		this->currentTileset =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)264,null());
HXLINE(  98)		this->currentTileset->loadGraphic(HX_("assets/images/tilesets/Tileset1.png",5d,c1,fd,f9),null(),null(),null(),null(),null());
HXLINE( 100)		Float _hx_tmp2 = this->currentTileset->x;
HXDLIN( 100)		this->layerPicker =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),_hx_tmp2)
            			->setFixed(1,HX_("y",79,00,00,00),(this->currentTileset->y - (int)24)));
HXLINE( 103)		this->currentTileReticle =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 104)		this->currentTileReticle->makeGraphic((int)26,(int)26,(int)0,null(),null());
HXLINE( 105)		::flixel::util::FlxSpriteUtil_obj::drawRect(this->currentTileReticle,(int)0,(int)0,(int)25,(int)25,(int)0, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("color",63,71,5c,4a),(int)-1)
            			->setFixed(1,HX_("thickness",74,f1,66,5a),(int)2)), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("smoothing",74,d5,e1,95),false)));
HXLINE( 106)		 ::flixel::FlxSprite _hx_tmp3 = this->currentTileReticle;
HXDLIN( 106)		_hx_tmp3->set_x((this->currentTileset->x - (int)1));
HXLINE( 107)		 ::flixel::FlxSprite _hx_tmp4 = this->currentTileReticle;
HXDLIN( 107)		_hx_tmp4->set_y((this->currentTileset->y - (int)1));
HXLINE( 108)		this->currentTileReticle->set_color((int)-65536);
HXLINE( 111)		this->tilePlacementReticle =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 112)		this->tilePlacementReticle->loadGraphicFromSprite(this->currentTileReticle);
HXLINE( 113)		this->tilePlacementReticle->set_color((int)-65536);
HXLINE( 119)		this->layer0Label =  ::flixel::text::FlxText_obj::__alloc( HX_CTX , ::Dynamic(this->layerPicker->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(this->layerPicker->__Field(HX_("y",79,00,00,00),hx::paccDynamic)),(int)24,HX_("0",30,00,00,00),(int)20,null());
HXLINE( 120)		this->layer0Label->set_bold(true);
HXLINE( 121)		this->layer1Label =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,( ::Dynamic(this->layerPicker->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) + (int)24), ::Dynamic(this->layerPicker->__Field(HX_("y",79,00,00,00),hx::paccDynamic)),(int)24,HX_("1",31,00,00,00),(int)20,null());
HXLINE( 122)		this->layer2Label =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,( ::Dynamic(this->layerPicker->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) + (int)48), ::Dynamic(this->layerPicker->__Field(HX_("y",79,00,00,00),hx::paccDynamic)),(int)24,HX_("2",32,00,00,00),(int)20,null());
HXLINE( 124)		this->layerLabels = ::Array_obj< ::Dynamic>::__new(3)->init(0,this->layer0Label)->init(1,this->layer1Label)->init(2,this->layer2Label);
HXLINE( 125)		this->objectGroups = ::Array_obj< ::Dynamic>::__new(3)->init(0,this->objectsBG)->init(1,this->objects)->init(2,this->objectsFG);
HXLINE( 126)		this->tilemaps = ::Array_obj< ::Dynamic>::__new(3)->init(0,this->tilesBG)->init(1,this->tilesCollision)->init(2,this->tilesFG);
HXLINE( 128)		 ::Dynamic f = this->setActiveLayer_dyn();
HXDLIN( 128)		 ::Dynamic _hx_tmp5 =  ::Dynamic(new _hx_Closure_0(f));
HXDLIN( 128)		::flixel::input::mouse::FlxMouseEventManager_obj::add(this->layer0Label,null(),_hx_tmp5,null(),null(),true,true,false,null());
HXLINE( 129)		 ::Dynamic f1 = this->setActiveLayer_dyn();
HXDLIN( 129)		 ::Dynamic _hx_tmp6 =  ::Dynamic(new _hx_Closure_1(f1));
HXDLIN( 129)		::flixel::input::mouse::FlxMouseEventManager_obj::add(this->layer1Label,null(),_hx_tmp6,null(),null(),true,true,false,null());
HXLINE( 130)		 ::Dynamic f2 = this->setActiveLayer_dyn();
HXDLIN( 130)		 ::Dynamic _hx_tmp7 =  ::Dynamic(new _hx_Closure_2(f2));
HXDLIN( 130)		::flixel::input::mouse::FlxMouseEventManager_obj::add(this->layer2Label,null(),_hx_tmp7,null(),null(),true,true,false,null());
HXLINE( 135)		this->activeTilemap->set_graphic(this->currentTileset->graphic);
HXLINE( 137)		this->add(this->background);
HXLINE( 139)		this->add(this->tilesBG);
HXLINE( 140)		this->add(this->objectsBG);
HXLINE( 142)		this->add(this->tilesCollision);
HXLINE( 143)		this->add(this->objects);
HXLINE( 144)		this->add(this->tilesFG);
HXLINE( 145)		this->add(this->objectsFG);
HXLINE( 146)		this->add(this->tilePlacementReticle);
HXLINE( 148)		this->add(this->layer0Label);
HXLINE( 149)		this->add(this->layer1Label);
HXLINE( 150)		this->add(this->layer2Label);
HXLINE( 153)		this->add(this->currentTileset);
HXLINE( 154)		this->add(this->currentTileReticle);
HXLINE( 155)		this->add(this->titleText);
HXLINE( 156)		this->super::create();
            	}


void EditorState_obj::setActiveLayer( ::flixel::text::FlxText label,int layer){
            	HX_STACKFRAME(&_hx_pos_157af214485eddd8_159_setActiveLayer)
HXLINE( 160)		this->layerLabels->__get(this->activeLayer).StaticCast<  ::flixel::text::FlxText >()->set_bold(false);
HXLINE( 161)		this->activeLayer = layer;
HXLINE( 162)		label->set_bold(true);
HXLINE( 164)		this->activeTilemap = this->tilemaps->__get(this->activeLayer).StaticCast<  ::flixel::tile::FlxTilemap >();
HXLINE( 165)		this->activeTilemap->set_graphic(this->currentTileset->graphic);
HXLINE( 166)		this->activeObjectGroup = this->objectGroups->__get(this->activeLayer).StaticCast<  ::flixel::group::FlxTypedGroup >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(EditorState_obj,setActiveLayer,(void))

void EditorState_obj::saveLevel(){
            	HX_STACKFRAME(&_hx_pos_157af214485eddd8_169_saveLevel)
HXLINE( 170)		::Array< int > bgTiles = this->tilesBG->getData(null());
HXLINE( 171)		::Array< int > collisionTiles = this->tilesCollision->getData(null());
HXLINE( 172)		::Array< int > fgTiles = this->tilesFG->getData(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorState_obj,saveLevel,(void))

void EditorState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_157af214485eddd8_175_update)
HXLINE( 176)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 176)		if (_this->keyManager->checkStatus((int)116,_this->status)) {
HXLINE( 177)			 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN( 177)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 177)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 180)		 ::flixel::math::FlxPoint mousePos = ::flixel::FlxG_obj::mouse->getPosition(null());
HXLINE( 181)		 ::flixel::input::mouse::FlxMouseButton _this1 = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 181)		bool _hx_tmp;
HXDLIN( 181)		if ((_this1->current != (int)1)) {
HXLINE( 181)			_hx_tmp = (_this1->current == (int)2);
            		}
            		else {
HXLINE( 181)			_hx_tmp = true;
            		}
HXDLIN( 181)		if (_hx_tmp) {
HXLINE( 182)			bool result = ::flixel::math::FlxMath_obj::pointInFlxRect(mousePos->x,mousePos->y,this->levelRect);
HXDLIN( 182)			if (mousePos->_weak) {
HXLINE( 182)				mousePos->put();
            			}
HXDLIN( 182)			if (result) {
HXLINE( 183)				int tileX = ::Std_obj::_hx_int(((Float)(::flixel::FlxG_obj::mouse->x - this->activeTilemap->x) / (Float)(int)24));
HXLINE( 184)				int tileY = ::Std_obj::_hx_int(((Float)(::flixel::FlxG_obj::mouse->y - this->activeTilemap->y) / (Float)(int)24));
HXLINE( 188)				this->activeTilemap->setTile(tileX,tileY,this->currentTileIndex,true);
            			}
HXLINE( 191)			if (this->currentTileset->overlapsPoint(mousePos,null(),null())) {
HXLINE( 192)				int tileX1 = ::Std_obj::_hx_int(((Float)(::flixel::FlxG_obj::mouse->x - this->currentTileset->x) / (Float)(int)24));
HXLINE( 193)				int tileY1 = ::Std_obj::_hx_int(((Float)(::flixel::FlxG_obj::mouse->y - this->currentTileset->y) / (Float)(int)24));
HXLINE( 195)				this->currentTileIndex = ((tileY1 * (int)16) + tileX1);
HXLINE( 198)				 ::flixel::FlxSprite _hx_tmp1 = this->currentTileReticle;
HXDLIN( 198)				Float _hx_tmp2 = this->currentTileset->x;
HXDLIN( 198)				_hx_tmp1->set_x(((_hx_tmp2 + (tileX1 * (int)24)) - (int)1));
HXLINE( 199)				 ::flixel::FlxSprite _hx_tmp3 = this->currentTileReticle;
HXDLIN( 199)				Float _hx_tmp4 = this->currentTileset->y;
HXDLIN( 199)				_hx_tmp3->set_y(((_hx_tmp4 + (tileY1 * (int)24)) - (int)1));
            			}
            		}
HXLINE( 202)		if ((::flixel::FlxG_obj::mouse->_rightButton->current == (int)2)) {
HXLINE( 203)			bool result1 = ::flixel::math::FlxMath_obj::pointInFlxRect(mousePos->x,mousePos->y,this->levelRect);
HXDLIN( 203)			if (mousePos->_weak) {
HXLINE( 203)				mousePos->put();
            			}
HXDLIN( 203)			if (result1) {
HXLINE( 204)				int tileX2 = ::Std_obj::_hx_int(((Float)(::flixel::FlxG_obj::mouse->x - this->activeTilemap->x) / (Float)(int)24));
HXLINE( 205)				int tileY2 = ::Std_obj::_hx_int(((Float)(::flixel::FlxG_obj::mouse->y - this->activeTilemap->y) / (Float)(int)24));
HXLINE( 207)				this->currentTileIndex = this->activeTilemap->getTile(tileX2,tileY2);
HXLINE( 209)				 ::flixel::FlxSprite _hx_tmp5 = this->currentTileReticle;
HXDLIN( 209)				Float _hx_tmp6 = this->activeTilemap->x;
HXDLIN( 209)				_hx_tmp5->set_x(((_hx_tmp6 + hx::Mod(this->currentTileIndex,(int)24)) - (int)1));
HXLINE( 210)				 ::flixel::FlxSprite _hx_tmp7 = this->currentTileReticle;
HXDLIN( 210)				Float _hx_tmp8 = this->activeTilemap->y;
HXDLIN( 210)				_hx_tmp7->set_y(((_hx_tmp8 + ::Std_obj::_hx_int(((Float)this->currentTileIndex / (Float)(int)24))) - (int)1));
            			}
            		}
HXLINE( 213)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 213)		bool _hx_tmp9 = _this2->keyManager->checkStatus((int)27,_this2->status);
HXLINE( 218)		bool _hx_tmp10;
HXDLIN( 218)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 218)		if (_this3->keyManager->checkStatus((int)17,_this3->status)) {
HXLINE( 218)			 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 218)			_hx_tmp10 = _this4->keyManager->checkStatus((int)83,_this4->status);
            		}
            		else {
HXLINE( 218)			_hx_tmp10 = false;
            		}
HXDLIN( 218)		if (_hx_tmp10) {
HXLINE( 219)			this->saveLevel();
            		}
HXLINE( 222)		 ::flixel::FlxSprite _hx_tmp11 = this->tilePlacementReticle;
HXDLIN( 222)		 ::flixel::math::FlxRect _this5 = this->levelRect;
HXDLIN( 222)		 ::flixel::math::FlxPoint Point = ::flixel::FlxG_obj::mouse->getPosition(null());
HXDLIN( 222)		bool result2 = ::flixel::math::FlxMath_obj::pointInFlxRect(Point->x,Point->y,_this5);
HXDLIN( 222)		if (Point->_weak) {
HXLINE( 222)			Point->put();
            		}
HXDLIN( 222)		_hx_tmp11->set_visible(result2);
HXLINE( 223)		 ::flixel::FlxSprite _hx_tmp12 = this->tilePlacementReticle;
HXDLIN( 223)		_hx_tmp12->set_x(((::Std_obj::_hx_int(((Float)::flixel::FlxG_obj::mouse->x / (Float)(int)24)) * (int)24) - (int)1));
HXLINE( 224)		 ::flixel::FlxSprite _hx_tmp13 = this->tilePlacementReticle;
HXDLIN( 224)		_hx_tmp13->set_y(((::Std_obj::_hx_int(((Float)::flixel::FlxG_obj::mouse->y / (Float)(int)24)) * (int)24) - (int)1));
HXLINE( 226)		this->super::update(elapsed);
            	}



hx::ObjectPtr< EditorState_obj > EditorState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< EditorState_obj > __this = new EditorState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< EditorState_obj > EditorState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	EditorState_obj *__this = (EditorState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EditorState_obj), true, "EditorState"));
	*(void **)__this = EditorState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

EditorState_obj::EditorState_obj()
{
}

void EditorState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EditorState);
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(tilesBG,"tilesBG");
	HX_MARK_MEMBER_NAME(tilesFG,"tilesFG");
	HX_MARK_MEMBER_NAME(tilesCollision,"tilesCollision");
	HX_MARK_MEMBER_NAME(tilemaps,"tilemaps");
	HX_MARK_MEMBER_NAME(objectsBG,"objectsBG");
	HX_MARK_MEMBER_NAME(objects,"objects");
	HX_MARK_MEMBER_NAME(objectsFG,"objectsFG");
	HX_MARK_MEMBER_NAME(objectGroups,"objectGroups");
	HX_MARK_MEMBER_NAME(currentTileset,"currentTileset");
	HX_MARK_MEMBER_NAME(currentTileReticle,"currentTileReticle");
	HX_MARK_MEMBER_NAME(tilePlacementReticle,"tilePlacementReticle");
	HX_MARK_MEMBER_NAME(levelRect,"levelRect");
	HX_MARK_MEMBER_NAME(currentTileIndex,"currentTileIndex");
	HX_MARK_MEMBER_NAME(activeTilemap,"activeTilemap");
	HX_MARK_MEMBER_NAME(activeObjectGroup,"activeObjectGroup");
	HX_MARK_MEMBER_NAME(layer0Button,"layer0Button");
	HX_MARK_MEMBER_NAME(layer1Button,"layer1Button");
	HX_MARK_MEMBER_NAME(layer2Button,"layer2Button");
	HX_MARK_MEMBER_NAME(layer0Label,"layer0Label");
	HX_MARK_MEMBER_NAME(layer1Label,"layer1Label");
	HX_MARK_MEMBER_NAME(layer2Label,"layer2Label");
	HX_MARK_MEMBER_NAME(layerLabels,"layerLabels");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(activeLayer,"activeLayer");
	HX_MARK_MEMBER_NAME(layerPicker,"layerPicker");
	HX_MARK_MEMBER_NAME(roomX,"roomX");
	HX_MARK_MEMBER_NAME(roomY,"roomY");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EditorState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(tilesBG,"tilesBG");
	HX_VISIT_MEMBER_NAME(tilesFG,"tilesFG");
	HX_VISIT_MEMBER_NAME(tilesCollision,"tilesCollision");
	HX_VISIT_MEMBER_NAME(tilemaps,"tilemaps");
	HX_VISIT_MEMBER_NAME(objectsBG,"objectsBG");
	HX_VISIT_MEMBER_NAME(objects,"objects");
	HX_VISIT_MEMBER_NAME(objectsFG,"objectsFG");
	HX_VISIT_MEMBER_NAME(objectGroups,"objectGroups");
	HX_VISIT_MEMBER_NAME(currentTileset,"currentTileset");
	HX_VISIT_MEMBER_NAME(currentTileReticle,"currentTileReticle");
	HX_VISIT_MEMBER_NAME(tilePlacementReticle,"tilePlacementReticle");
	HX_VISIT_MEMBER_NAME(levelRect,"levelRect");
	HX_VISIT_MEMBER_NAME(currentTileIndex,"currentTileIndex");
	HX_VISIT_MEMBER_NAME(activeTilemap,"activeTilemap");
	HX_VISIT_MEMBER_NAME(activeObjectGroup,"activeObjectGroup");
	HX_VISIT_MEMBER_NAME(layer0Button,"layer0Button");
	HX_VISIT_MEMBER_NAME(layer1Button,"layer1Button");
	HX_VISIT_MEMBER_NAME(layer2Button,"layer2Button");
	HX_VISIT_MEMBER_NAME(layer0Label,"layer0Label");
	HX_VISIT_MEMBER_NAME(layer1Label,"layer1Label");
	HX_VISIT_MEMBER_NAME(layer2Label,"layer2Label");
	HX_VISIT_MEMBER_NAME(layerLabels,"layerLabels");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(activeLayer,"activeLayer");
	HX_VISIT_MEMBER_NAME(layerPicker,"layerPicker");
	HX_VISIT_MEMBER_NAME(roomX,"roomX");
	HX_VISIT_MEMBER_NAME(roomY,"roomY");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val EditorState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"roomX") ) { return hx::Val( roomX ); }
		if (HX_FIELD_EQ(inName,"roomY") ) { return hx::Val( roomY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tilesBG") ) { return hx::Val( tilesBG ); }
		if (HX_FIELD_EQ(inName,"tilesFG") ) { return hx::Val( tilesFG ); }
		if (HX_FIELD_EQ(inName,"objects") ) { return hx::Val( objects ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tilemaps") ) { return hx::Val( tilemaps ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { return hx::Val( titleText ); }
		if (HX_FIELD_EQ(inName,"objectsBG") ) { return hx::Val( objectsBG ); }
		if (HX_FIELD_EQ(inName,"objectsFG") ) { return hx::Val( objectsFG ); }
		if (HX_FIELD_EQ(inName,"levelRect") ) { return hx::Val( levelRect ); }
		if (HX_FIELD_EQ(inName,"saveLevel") ) { return hx::Val( saveLevel_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return hx::Val( background ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"layer0Label") ) { return hx::Val( layer0Label ); }
		if (HX_FIELD_EQ(inName,"layer1Label") ) { return hx::Val( layer1Label ); }
		if (HX_FIELD_EQ(inName,"layer2Label") ) { return hx::Val( layer2Label ); }
		if (HX_FIELD_EQ(inName,"layerLabels") ) { return hx::Val( layerLabels ); }
		if (HX_FIELD_EQ(inName,"activeLayer") ) { return hx::Val( activeLayer ); }
		if (HX_FIELD_EQ(inName,"layerPicker") ) { return hx::Val( layerPicker ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"objectGroups") ) { return hx::Val( objectGroups ); }
		if (HX_FIELD_EQ(inName,"layer0Button") ) { return hx::Val( layer0Button ); }
		if (HX_FIELD_EQ(inName,"layer1Button") ) { return hx::Val( layer1Button ); }
		if (HX_FIELD_EQ(inName,"layer2Button") ) { return hx::Val( layer2Button ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"activeTilemap") ) { return hx::Val( activeTilemap ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tilesCollision") ) { return hx::Val( tilesCollision ); }
		if (HX_FIELD_EQ(inName,"currentTileset") ) { return hx::Val( currentTileset ); }
		if (HX_FIELD_EQ(inName,"setActiveLayer") ) { return hx::Val( setActiveLayer_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentTileIndex") ) { return hx::Val( currentTileIndex ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"activeObjectGroup") ) { return hx::Val( activeObjectGroup ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentTileReticle") ) { return hx::Val( currentTileReticle ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"tilePlacementReticle") ) { return hx::Val( tilePlacementReticle ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val EditorState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"roomX") ) { roomX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"roomY") ) { roomY=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tilesBG") ) { tilesBG=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tilesFG") ) { tilesFG=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"objects") ) { objects=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tilemaps") ) { tilemaps=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"objectsBG") ) { objectsBG=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"objectsFG") ) { objectsFG=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"levelRect") ) { levelRect=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"layer0Label") ) { layer0Label=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layer1Label") ) { layer1Label=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layer2Label") ) { layer2Label=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layerLabels") ) { layerLabels=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"activeLayer") ) { activeLayer=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layerPicker") ) { layerPicker=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"objectGroups") ) { objectGroups=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layer0Button") ) { layer0Button=inValue.Cast<  ::flixel::ui::FlxBitmapTextButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layer1Button") ) { layer1Button=inValue.Cast<  ::flixel::ui::FlxBitmapTextButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layer2Button") ) { layer2Button=inValue.Cast<  ::flixel::ui::FlxBitmapTextButton >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"activeTilemap") ) { activeTilemap=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tilesCollision") ) { tilesCollision=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentTileset") ) { currentTileset=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentTileIndex") ) { currentTileIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"activeObjectGroup") ) { activeObjectGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentTileReticle") ) { currentTileReticle=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"tilePlacementReticle") ) { tilePlacementReticle=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EditorState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("titleText","\x65","\xba","\xa4","\x70"));
	outFields->push(HX_HCSTRING("tilesBG","\x8a","\x62","\x93","\x45"));
	outFields->push(HX_HCSTRING("tilesFG","\x06","\x66","\x93","\x45"));
	outFields->push(HX_HCSTRING("tilesCollision","\x2d","\x32","\x81","\x45"));
	outFields->push(HX_HCSTRING("tilemaps","\x85","\x38","\x83","\x97"));
	outFields->push(HX_HCSTRING("objectsBG","\x99","\x7f","\x9a","\x43"));
	outFields->push(HX_HCSTRING("objects","\xd4","\x68","\x4f","\x82"));
	outFields->push(HX_HCSTRING("objectsFG","\x15","\x83","\x9a","\x43"));
	outFields->push(HX_HCSTRING("objectGroups","\x73","\x30","\x32","\xf6"));
	outFields->push(HX_HCSTRING("currentTileset","\xfb","\xf5","\x27","\x53"));
	outFields->push(HX_HCSTRING("currentTileReticle","\x6d","\xa5","\xc8","\x0d"));
	outFields->push(HX_HCSTRING("tilePlacementReticle","\x9d","\x9a","\xef","\xb9"));
	outFields->push(HX_HCSTRING("levelRect","\xc8","\xa0","\x76","\x81"));
	outFields->push(HX_HCSTRING("currentTileIndex","\x8b","\x6d","\xa0","\x3c"));
	outFields->push(HX_HCSTRING("activeTilemap","\x08","\x3b","\x58","\xfd"));
	outFields->push(HX_HCSTRING("activeObjectGroup","\xda","\x8f","\xb4","\x05"));
	outFields->push(HX_HCSTRING("layer0Button","\x91","\xe4","\x6b","\x00"));
	outFields->push(HX_HCSTRING("layer1Button","\x52","\x5b","\x01","\x2a"));
	outFields->push(HX_HCSTRING("layer2Button","\x13","\xd2","\x96","\x53"));
	outFields->push(HX_HCSTRING("layer0Label","\x35","\x04","\x9b","\x37"));
	outFields->push(HX_HCSTRING("layer1Label","\x94","\x60","\xf6","\x9d"));
	outFields->push(HX_HCSTRING("layer2Label","\xf3","\xbc","\x51","\x04"));
	outFields->push(HX_HCSTRING("layerLabels","\xb0","\xd0","\xae","\x81"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("activeLayer","\x2b","\x82","\x05","\xcc"));
	outFields->push(HX_HCSTRING("layerPicker","\x3f","\xa4","\xfe","\xb6"));
	outFields->push(HX_HCSTRING("roomX","\xdd","\x69","\x61","\xed"));
	outFields->push(HX_HCSTRING("roomY","\xde","\x69","\x61","\xed"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo EditorState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(EditorState_obj,titleText),HX_HCSTRING("titleText","\x65","\xba","\xa4","\x70")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(EditorState_obj,tilesBG),HX_HCSTRING("tilesBG","\x8a","\x62","\x93","\x45")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(EditorState_obj,tilesFG),HX_HCSTRING("tilesFG","\x06","\x66","\x93","\x45")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(EditorState_obj,tilesCollision),HX_HCSTRING("tilesCollision","\x2d","\x32","\x81","\x45")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(EditorState_obj,tilemaps),HX_HCSTRING("tilemaps","\x85","\x38","\x83","\x97")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(EditorState_obj,objectsBG),HX_HCSTRING("objectsBG","\x99","\x7f","\x9a","\x43")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(EditorState_obj,objects),HX_HCSTRING("objects","\xd4","\x68","\x4f","\x82")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(EditorState_obj,objectsFG),HX_HCSTRING("objectsFG","\x15","\x83","\x9a","\x43")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(EditorState_obj,objectGroups),HX_HCSTRING("objectGroups","\x73","\x30","\x32","\xf6")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(EditorState_obj,currentTileset),HX_HCSTRING("currentTileset","\xfb","\xf5","\x27","\x53")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(EditorState_obj,currentTileReticle),HX_HCSTRING("currentTileReticle","\x6d","\xa5","\xc8","\x0d")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(EditorState_obj,tilePlacementReticle),HX_HCSTRING("tilePlacementReticle","\x9d","\x9a","\xef","\xb9")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(EditorState_obj,levelRect),HX_HCSTRING("levelRect","\xc8","\xa0","\x76","\x81")},
	{hx::fsInt,(int)offsetof(EditorState_obj,currentTileIndex),HX_HCSTRING("currentTileIndex","\x8b","\x6d","\xa0","\x3c")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(EditorState_obj,activeTilemap),HX_HCSTRING("activeTilemap","\x08","\x3b","\x58","\xfd")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(EditorState_obj,activeObjectGroup),HX_HCSTRING("activeObjectGroup","\xda","\x8f","\xb4","\x05")},
	{hx::fsObject /*::flixel::ui::FlxBitmapTextButton*/ ,(int)offsetof(EditorState_obj,layer0Button),HX_HCSTRING("layer0Button","\x91","\xe4","\x6b","\x00")},
	{hx::fsObject /*::flixel::ui::FlxBitmapTextButton*/ ,(int)offsetof(EditorState_obj,layer1Button),HX_HCSTRING("layer1Button","\x52","\x5b","\x01","\x2a")},
	{hx::fsObject /*::flixel::ui::FlxBitmapTextButton*/ ,(int)offsetof(EditorState_obj,layer2Button),HX_HCSTRING("layer2Button","\x13","\xd2","\x96","\x53")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(EditorState_obj,layer0Label),HX_HCSTRING("layer0Label","\x35","\x04","\x9b","\x37")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(EditorState_obj,layer1Label),HX_HCSTRING("layer1Label","\x94","\x60","\xf6","\x9d")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(EditorState_obj,layer2Label),HX_HCSTRING("layer2Label","\xf3","\xbc","\x51","\x04")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(EditorState_obj,layerLabels),HX_HCSTRING("layerLabels","\xb0","\xd0","\xae","\x81")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(EditorState_obj,background),HX_HCSTRING("background","\xee","\x93","\x1d","\x26")},
	{hx::fsInt,(int)offsetof(EditorState_obj,activeLayer),HX_HCSTRING("activeLayer","\x2b","\x82","\x05","\xcc")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(EditorState_obj,layerPicker),HX_HCSTRING("layerPicker","\x3f","\xa4","\xfe","\xb6")},
	{hx::fsInt,(int)offsetof(EditorState_obj,roomX),HX_HCSTRING("roomX","\xdd","\x69","\x61","\xed")},
	{hx::fsInt,(int)offsetof(EditorState_obj,roomY),HX_HCSTRING("roomY","\xde","\x69","\x61","\xed")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *EditorState_obj_sStaticStorageInfo = 0;
#endif

static ::String EditorState_obj_sMemberFields[] = {
	HX_HCSTRING("titleText","\x65","\xba","\xa4","\x70"),
	HX_HCSTRING("tilesBG","\x8a","\x62","\x93","\x45"),
	HX_HCSTRING("tilesFG","\x06","\x66","\x93","\x45"),
	HX_HCSTRING("tilesCollision","\x2d","\x32","\x81","\x45"),
	HX_HCSTRING("tilemaps","\x85","\x38","\x83","\x97"),
	HX_HCSTRING("objectsBG","\x99","\x7f","\x9a","\x43"),
	HX_HCSTRING("objects","\xd4","\x68","\x4f","\x82"),
	HX_HCSTRING("objectsFG","\x15","\x83","\x9a","\x43"),
	HX_HCSTRING("objectGroups","\x73","\x30","\x32","\xf6"),
	HX_HCSTRING("currentTileset","\xfb","\xf5","\x27","\x53"),
	HX_HCSTRING("currentTileReticle","\x6d","\xa5","\xc8","\x0d"),
	HX_HCSTRING("tilePlacementReticle","\x9d","\x9a","\xef","\xb9"),
	HX_HCSTRING("levelRect","\xc8","\xa0","\x76","\x81"),
	HX_HCSTRING("currentTileIndex","\x8b","\x6d","\xa0","\x3c"),
	HX_HCSTRING("activeTilemap","\x08","\x3b","\x58","\xfd"),
	HX_HCSTRING("activeObjectGroup","\xda","\x8f","\xb4","\x05"),
	HX_HCSTRING("layer0Button","\x91","\xe4","\x6b","\x00"),
	HX_HCSTRING("layer1Button","\x52","\x5b","\x01","\x2a"),
	HX_HCSTRING("layer2Button","\x13","\xd2","\x96","\x53"),
	HX_HCSTRING("layer0Label","\x35","\x04","\x9b","\x37"),
	HX_HCSTRING("layer1Label","\x94","\x60","\xf6","\x9d"),
	HX_HCSTRING("layer2Label","\xf3","\xbc","\x51","\x04"),
	HX_HCSTRING("layerLabels","\xb0","\xd0","\xae","\x81"),
	HX_HCSTRING("background","\xee","\x93","\x1d","\x26"),
	HX_HCSTRING("activeLayer","\x2b","\x82","\x05","\xcc"),
	HX_HCSTRING("layerPicker","\x3f","\xa4","\xfe","\xb6"),
	HX_HCSTRING("roomX","\xdd","\x69","\x61","\xed"),
	HX_HCSTRING("roomY","\xde","\x69","\x61","\xed"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("setActiveLayer","\xa9","\xbd","\xc3","\x73"),
	HX_HCSTRING("saveLevel","\x07","\x1d","\x10","\x01"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void EditorState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EditorState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EditorState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EditorState_obj::__mClass,"__mClass");
};

#endif

hx::Class EditorState_obj::__mClass;

void EditorState_obj::__register()
{
	hx::Object *dummy = new EditorState_obj;
	EditorState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("EditorState","\x04","\x09","\xa0","\xfc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = EditorState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EditorState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EditorState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EditorState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EditorState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EditorState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

