// Generated by Haxe 3.4.5
#ifndef INCLUDED_flixel_ui_FlxBitmapTextButton
#define INCLUDED_flixel_ui_FlxBitmapTextButton

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxBitmapText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxBitmapText.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,ui,FlxBitmapTextButton)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton_flixel_text_FlxBitmapText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace flixel{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES FlxBitmapTextButton_obj : public  ::flixel::ui::FlxTypedButton_flixel_text_FlxBitmapText_obj
{
	public:
		typedef  ::flixel::ui::FlxTypedButton_flixel_text_FlxBitmapText_obj super;
		typedef FlxBitmapTextButton_obj OBJ_;
		FlxBitmapTextButton_obj();

	public:
		enum { _hx_ClassId = 0x46297990 };

		void __construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Label, ::Dynamic OnClick);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.ui.FlxBitmapTextButton")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.ui.FlxBitmapTextButton"); }
		static hx::ObjectPtr< FlxBitmapTextButton_obj > __new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Label, ::Dynamic OnClick);
		static hx::ObjectPtr< FlxBitmapTextButton_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,::String Label, ::Dynamic OnClick);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxBitmapTextButton_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlxBitmapTextButton","\xc0","\x73","\x7e","\x37"); }

		void resetHelpers();

		void update(Float elapsed);

};

} // end namespace flixel
} // end namespace ui

#endif /* INCLUDED_flixel_ui_FlxBitmapTextButton */ 
